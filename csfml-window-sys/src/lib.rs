/* automatically generated by rust-bindgen */

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]

// -- Manual additions --
extern crate csfml_system_sys;
use csfml_system_sys::*;
// -- End manual additions --

// Manually replaced size_t with usize

pub enum sfContext { }
pub enum sfWindow { }
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sfJoystickIdentification {
    pub name: *const ::std::os::raw::c_char,
    pub vendorId: ::std::os::raw::c_uint,
    pub productId: ::std::os::raw::c_uint,
}
impl ::std::default::Default for sfJoystickIdentification {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub const sfJoystickAxisCount: Enum_Unnamed1 = Enum_Unnamed1::sfJoystickCount;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed1 { sfJoystickCount = 8, sfJoystickButtonCount = 32, }
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum sfJoystickAxis {
    sfJoystickX = 0,
    sfJoystickY = 1,
    sfJoystickZ = 2,
    sfJoystickR = 3,
    sfJoystickU = 4,
    sfJoystickV = 5,
    sfJoystickPovX = 6,
    sfJoystickPovY = 7,
}
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum sfKeyCode {
    sfKeyUnknown = -1,
    sfKeyA = 0,
    sfKeyB = 1,
    sfKeyC = 2,
    sfKeyD = 3,
    sfKeyE = 4,
    sfKeyF = 5,
    sfKeyG = 6,
    sfKeyH = 7,
    sfKeyI = 8,
    sfKeyJ = 9,
    sfKeyK = 10,
    sfKeyL = 11,
    sfKeyM = 12,
    sfKeyN = 13,
    sfKeyO = 14,
    sfKeyP = 15,
    sfKeyQ = 16,
    sfKeyR = 17,
    sfKeyS = 18,
    sfKeyT = 19,
    sfKeyU = 20,
    sfKeyV = 21,
    sfKeyW = 22,
    sfKeyX = 23,
    sfKeyY = 24,
    sfKeyZ = 25,
    sfKeyNum0 = 26,
    sfKeyNum1 = 27,
    sfKeyNum2 = 28,
    sfKeyNum3 = 29,
    sfKeyNum4 = 30,
    sfKeyNum5 = 31,
    sfKeyNum6 = 32,
    sfKeyNum7 = 33,
    sfKeyNum8 = 34,
    sfKeyNum9 = 35,
    sfKeyEscape = 36,
    sfKeyLControl = 37,
    sfKeyLShift = 38,
    sfKeyLAlt = 39,
    sfKeyLSystem = 40,
    sfKeyRControl = 41,
    sfKeyRShift = 42,
    sfKeyRAlt = 43,
    sfKeyRSystem = 44,
    sfKeyMenu = 45,
    sfKeyLBracket = 46,
    sfKeyRBracket = 47,
    sfKeySemiColon = 48,
    sfKeyComma = 49,
    sfKeyPeriod = 50,
    sfKeyQuote = 51,
    sfKeySlash = 52,
    sfKeyBackSlash = 53,
    sfKeyTilde = 54,
    sfKeyEqual = 55,
    sfKeyDash = 56,
    sfKeySpace = 57,
    sfKeyReturn = 58,
    sfKeyBack = 59,
    sfKeyTab = 60,
    sfKeyPageUp = 61,
    sfKeyPageDown = 62,
    sfKeyEnd = 63,
    sfKeyHome = 64,
    sfKeyInsert = 65,
    sfKeyDelete = 66,
    sfKeyAdd = 67,
    sfKeySubtract = 68,
    sfKeyMultiply = 69,
    sfKeyDivide = 70,
    sfKeyLeft = 71,
    sfKeyRight = 72,
    sfKeyUp = 73,
    sfKeyDown = 74,
    sfKeyNumpad0 = 75,
    sfKeyNumpad1 = 76,
    sfKeyNumpad2 = 77,
    sfKeyNumpad3 = 78,
    sfKeyNumpad4 = 79,
    sfKeyNumpad5 = 80,
    sfKeyNumpad6 = 81,
    sfKeyNumpad7 = 82,
    sfKeyNumpad8 = 83,
    sfKeyNumpad9 = 84,
    sfKeyF1 = 85,
    sfKeyF2 = 86,
    sfKeyF3 = 87,
    sfKeyF4 = 88,
    sfKeyF5 = 89,
    sfKeyF6 = 90,
    sfKeyF7 = 91,
    sfKeyF8 = 92,
    sfKeyF9 = 93,
    sfKeyF10 = 94,
    sfKeyF11 = 95,
    sfKeyF12 = 96,
    sfKeyF13 = 97,
    sfKeyF14 = 98,
    sfKeyF15 = 99,
    sfKeyPause = 100,
    sfKeyCount = 101,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum sfMouseButton {
    sfMouseLeft = 0,
    sfMouseRight = 1,
    sfMouseMiddle = 2,
    sfMouseXButton1 = 3,
    sfMouseXButton2 = 4,
    sfMouseButtonCount = 5,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum sfMouseWheel {
    sfMouseVerticalWheel = 0,
    sfMouseHorizontalWheel = 1,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum sfSensorType {
    sfSensorAccelerometer = 0,
    sfSensorGyroscope = 1,
    sfSensorMagnetometer = 2,
    sfSensorGravity = 3,
    sfSensorUserAcceleration = 4,
    sfSensorOrientation = 5,
    sfSensorCount = 6,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum sfEventType {
    sfEvtClosed = 0,
    sfEvtResized = 1,
    sfEvtLostFocus = 2,
    sfEvtGainedFocus = 3,
    sfEvtTextEntered = 4,
    sfEvtKeyPressed = 5,
    sfEvtKeyReleased = 6,
    sfEvtMouseWheelMoved = 7,
    sfEvtMouseWheelScrolled = 8,
    sfEvtMouseButtonPressed = 9,
    sfEvtMouseButtonReleased = 10,
    sfEvtMouseMoved = 11,
    sfEvtMouseEntered = 12,
    sfEvtMouseLeft = 13,
    sfEvtJoystickButtonPressed = 14,
    sfEvtJoystickButtonReleased = 15,
    sfEvtJoystickMoved = 16,
    sfEvtJoystickConnected = 17,
    sfEvtJoystickDisconnected = 18,
    sfEvtTouchBegan = 19,
    sfEvtTouchMoved = 20,
    sfEvtTouchEnded = 21,
    sfEvtSensorChanged = 22,
    sfEvtCount = 23,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sfKeyEvent {
    pub type_: sfEventType,
    pub code: sfKeyCode,
    pub alt: sfBool,
    pub control: sfBool,
    pub shift: sfBool,
    pub system: sfBool,
}
impl ::std::default::Default for sfKeyEvent {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sfTextEvent {
    pub type_: sfEventType,
    pub unicode: sfUint32,
}
impl ::std::default::Default for sfTextEvent {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sfMouseMoveEvent {
    pub type_: sfEventType,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
}
impl ::std::default::Default for sfMouseMoveEvent {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sfMouseButtonEvent {
    pub type_: sfEventType,
    pub button: sfMouseButton,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
}
impl ::std::default::Default for sfMouseButtonEvent {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sfMouseWheelEvent {
    pub type_: sfEventType,
    pub delta: ::std::os::raw::c_int,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
}
impl ::std::default::Default for sfMouseWheelEvent {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sfMouseWheelScrollEvent {
    pub type_: sfEventType,
    pub wheel: sfMouseWheel,
    pub delta: f32,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
}
impl ::std::default::Default for sfMouseWheelScrollEvent {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sfJoystickMoveEvent {
    pub type_: sfEventType,
    pub joystickId: ::std::os::raw::c_uint,
    pub axis: sfJoystickAxis,
    pub position: f32,
}
impl ::std::default::Default for sfJoystickMoveEvent {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sfJoystickButtonEvent {
    pub type_: sfEventType,
    pub joystickId: ::std::os::raw::c_uint,
    pub button: ::std::os::raw::c_uint,
}
impl ::std::default::Default for sfJoystickButtonEvent {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sfJoystickConnectEvent {
    pub type_: sfEventType,
    pub joystickId: ::std::os::raw::c_uint,
}
impl ::std::default::Default for sfJoystickConnectEvent {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sfSizeEvent {
    pub type_: sfEventType,
    pub width: ::std::os::raw::c_uint,
    pub height: ::std::os::raw::c_uint,
}
impl ::std::default::Default for sfSizeEvent {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sfTouchEvent {
    pub type_: sfEventType,
    pub finger: ::std::os::raw::c_uint,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
}
impl ::std::default::Default for sfTouchEvent {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sfSensorEvent {
    pub type_: sfEventType,
    pub sensorType: sfSensorType,
    pub x: f32,
    pub y: f32,
    pub z: f32,
}
impl ::std::default::Default for sfSensorEvent {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sfEvent {
    pub _bindgen_data_: [u32; 6usize],
}
impl sfEvent {
    pub unsafe fn type_(&mut self) -> *mut sfEventType {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn size(&mut self) -> *mut sfSizeEvent {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn key(&mut self) -> *mut sfKeyEvent {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn text(&mut self) -> *mut sfTextEvent {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn mouseMove(&mut self) -> *mut sfMouseMoveEvent {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn mouseButton(&mut self) -> *mut sfMouseButtonEvent {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn mouseWheel(&mut self) -> *mut sfMouseWheelEvent {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn mouseWheelScroll(&mut self)
     -> *mut sfMouseWheelScrollEvent {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn joystickMove(&mut self) -> *mut sfJoystickMoveEvent {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn joystickButton(&mut self) -> *mut sfJoystickButtonEvent {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn joystickConnect(&mut self) -> *mut sfJoystickConnectEvent {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn touch(&mut self) -> *mut sfTouchEvent {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn sensor(&mut self) -> *mut sfSensorEvent {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for sfEvent {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sfVideoMode {
    pub width: ::std::os::raw::c_uint,
    pub height: ::std::os::raw::c_uint,
    pub bitsPerPixel: ::std::os::raw::c_uint,
}
impl ::std::default::Default for sfVideoMode {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type sfWindowHandle = ::std::os::raw::c_ulong;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum sfWindowStyle {
    sfNone = 0,
    sfTitlebar = 1,
    sfResize = 2,
    sfClose = 4,
    sfFullscreen = 8,
    sfDefaultStyle = 7,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum sfContextAttribute {
    sfContextDefault = 0,
    sfContextCore = 1,
    sfContextDebug = 4,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
#[derive(PartialEq, Eq, PartialOrd, Ord)] // Required by rust-sfml
pub struct sfContextSettings {
    pub depthBits: ::std::os::raw::c_uint,
    pub stencilBits: ::std::os::raw::c_uint,
    pub antialiasingLevel: ::std::os::raw::c_uint,
    pub majorVersion: ::std::os::raw::c_uint,
    pub minorVersion: ::std::os::raw::c_uint,
    pub attributeFlags: sfUint32,
}
impl ::std::default::Default for sfContextSettings {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
extern "C" {
    pub fn sfContext_create() -> *mut sfContext;
    pub fn sfContext_destroy(context: *mut sfContext);
    pub fn sfContext_setActive(context: *mut sfContext, active: sfBool);
    pub fn sfJoystick_isConnected(joystick: ::std::os::raw::c_uint) -> sfBool;
    pub fn sfJoystick_getButtonCount(joystick: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_uint;
    pub fn sfJoystick_hasAxis(joystick: ::std::os::raw::c_uint,
                              axis: sfJoystickAxis) -> sfBool;
    pub fn sfJoystick_isButtonPressed(joystick: ::std::os::raw::c_uint,
                                      button: ::std::os::raw::c_uint)
     -> sfBool;
    pub fn sfJoystick_getAxisPosition(joystick: ::std::os::raw::c_uint,
                                      axis: sfJoystickAxis) -> f32;
    pub fn sfJoystick_getIdentification(joystick: ::std::os::raw::c_uint)
     -> sfJoystickIdentification;
    pub fn sfJoystick_update();
    pub fn sfKeyboard_isKeyPressed(key: sfKeyCode) -> sfBool;
    pub fn sfMouse_isButtonPressed(button: sfMouseButton) -> sfBool;
    pub fn sfMouse_getPosition(relativeTo: *const sfWindow) -> sfVector2i;
    pub fn sfMouse_setPosition(position: sfVector2i,
                               relativeTo: *const sfWindow);
    pub fn sfSensor_isAvailable(sensor: sfSensorType) -> sfBool;
    pub fn sfSensor_setEnabled(sensor: sfSensorType, enabled: sfBool);
    pub fn sfSensor_getValue(sensor: sfSensorType) -> sfVector3f;
    pub fn sfTouch_isDown(finger: ::std::os::raw::c_uint) -> sfBool;
    pub fn sfTouch_getPosition(finger: ::std::os::raw::c_uint,
                               relativeTo: *const sfWindow) -> sfVector2i;
    pub fn sfVideoMode_getDesktopMode() -> sfVideoMode;
    pub fn sfVideoMode_getFullscreenModes(Count: *mut usize)
     -> *const sfVideoMode;
    pub fn sfVideoMode_isValid(mode: sfVideoMode) -> sfBool;
    pub fn sfWindow_create(mode: sfVideoMode,
                           title: *const ::std::os::raw::c_char,
                           style: sfUint32,
                           settings: *const sfContextSettings)
     -> *mut sfWindow;
    pub fn sfWindow_createUnicode(mode: sfVideoMode, title: *const sfUint32,
                                  style: sfUint32,
                                  settings: *const sfContextSettings)
     -> *mut sfWindow;
    pub fn sfWindow_createFromHandle(handle: sfWindowHandle,
                                     settings: *const sfContextSettings)
     -> *mut sfWindow;
    pub fn sfWindow_destroy(window: *mut sfWindow);
    pub fn sfWindow_close(window: *mut sfWindow);
    pub fn sfWindow_isOpen(window: *const sfWindow) -> sfBool;
    pub fn sfWindow_getSettings(window: *const sfWindow) -> sfContextSettings;
    pub fn sfWindow_pollEvent(window: *mut sfWindow, event: *mut sfEvent)
     -> sfBool;
    pub fn sfWindow_waitEvent(window: *mut sfWindow, event: *mut sfEvent)
     -> sfBool;
    pub fn sfWindow_getPosition(window: *const sfWindow) -> sfVector2i;
    pub fn sfWindow_setPosition(window: *mut sfWindow, position: sfVector2i);
    pub fn sfWindow_getSize(window: *const sfWindow) -> sfVector2u;
    pub fn sfWindow_setSize(window: *mut sfWindow, size: sfVector2u);
    pub fn sfWindow_setTitle(window: *mut sfWindow,
                             title: *const ::std::os::raw::c_char);
    pub fn sfWindow_setUnicodeTitle(window: *mut sfWindow,
                                    title: *const sfUint32);
    pub fn sfWindow_setIcon(window: *mut sfWindow,
                            width: ::std::os::raw::c_uint,
                            height: ::std::os::raw::c_uint,
                            pixels: *const sfUint8);
    pub fn sfWindow_setVisible(window: *mut sfWindow, visible: sfBool);
    pub fn sfWindow_setMouseCursorVisible(window: *mut sfWindow,
                                          visible: sfBool);
    pub fn sfWindow_setVerticalSyncEnabled(window: *mut sfWindow,
                                           enabled: sfBool);
    pub fn sfWindow_setKeyRepeatEnabled(window: *mut sfWindow,
                                        enabled: sfBool);
    pub fn sfWindow_setActive(window: *mut sfWindow, active: sfBool)
     -> sfBool;
    pub fn sfWindow_requestFocus(window: *mut sfWindow);
    pub fn sfWindow_hasFocus(window: *const sfWindow) -> sfBool;
    pub fn sfWindow_display(window: *mut sfWindow);
    pub fn sfWindow_setFramerateLimit(window: *mut sfWindow,
                                      limit: ::std::os::raw::c_uint);
    pub fn sfWindow_setJoystickThreshold(window: *mut sfWindow,
                                         threshold: f32);
    pub fn sfWindow_getSystemHandle(window: *const sfWindow)
     -> sfWindowHandle;
}
