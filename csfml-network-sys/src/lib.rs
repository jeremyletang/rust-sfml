/* automatically generated by rust-bindgen */

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]

// -- Manual additions --
extern crate csfml_system_sys;
extern crate libc;
use csfml_system_sys::*;
use libc::wchar_t;
// -- End manual additions --

// Manually edited to replace `size_t` with `usize`.

#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sfIpAddress {
    pub address: [::std::os::raw::c_char; 16usize],
}
impl ::std::default::Default for sfIpAddress {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum sfFtpDirectoryResponse { }
pub enum sfFtpListingResponse { }
pub enum sfFtpResponse { }
pub enum sfFtp { }
pub enum sfHttpRequest { }
pub enum sfHttpResponse { }
pub enum sfHttp { }
pub enum sfPacket { }
pub enum sfSocketSelector { }
pub enum sfTcpListener { }
pub enum sfTcpSocket { }
pub enum sfUdpSocket { }
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum sfFtpTransferMode {
    sfFtpBinary = 0,
    sfFtpAscii = 1,
    sfFtpEbcdic = 2,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum sfFtpStatus {
    sfFtpRestartMarkerReply = 110,
    sfFtpServiceReadySoon = 120,
    sfFtpDataConnectionAlreadyOpened = 125,
    sfFtpOpeningDataConnection = 150,
    sfFtpOk = 200,
    sfFtpPointlessCommand = 202,
    sfFtpSystemStatus = 211,
    sfFtpDirectoryStatus = 212,
    sfFtpFileStatus = 213,
    sfFtpHelpMessage = 214,
    sfFtpSystemType = 215,
    sfFtpServiceReady = 220,
    sfFtpClosingConnection = 221,
    sfFtpDataConnectionOpened = 225,
    sfFtpClosingDataConnection = 226,
    sfFtpEnteringPassiveMode = 227,
    sfFtpLoggedIn = 230,
    sfFtpFileActionOk = 250,
    sfFtpDirectoryOk = 257,
    sfFtpNeedPassword = 331,
    sfFtpNeedAccountToLogIn = 332,
    sfFtpNeedInformation = 350,
    sfFtpServiceUnavailable = 421,
    sfFtpDataConnectionUnavailable = 425,
    sfFtpTransferAborted = 426,
    sfFtpFileActionAborted = 450,
    sfFtpLocalError = 451,
    sfFtpInsufficientStorageSpace = 452,
    sfFtpCommandUnknown = 500,
    sfFtpParametersUnknown = 501,
    sfFtpCommandNotImplemented = 502,
    sfFtpBadCommandSequence = 503,
    sfFtpParameterNotImplemented = 504,
    sfFtpNotLoggedIn = 530,
    sfFtpNeedAccountToStore = 532,
    sfFtpFileUnavailable = 550,
    sfFtpPageTypeUnknown = 551,
    sfFtpNotEnoughMemory = 552,
    sfFtpFilenameNotAllowed = 553,
    sfFtpInvalidResponse = 1000,
    sfFtpConnectionFailed = 1001,
    sfFtpConnectionClosed = 1002,
    sfFtpInvalidFile = 1003,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum sfHttpMethod {
    sfHttpGet = 0,
    sfHttpPost = 1,
    sfHttpHead = 2,
    sfHttpPut = 3,
    sfHttpDelete = 4,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum sfHttpStatus {
    sfHttpOk = 200,
    sfHttpCreated = 201,
    sfHttpAccepted = 202,
    sfHttpNoContent = 204,
    sfHttpResetContent = 205,
    sfHttpPartialContent = 206,
    sfHttpMultipleChoices = 300,
    sfHttpMovedPermanently = 301,
    sfHttpMovedTemporarily = 302,
    sfHttpNotModified = 304,
    sfHttpBadRequest = 400,
    sfHttpUnauthorized = 401,
    sfHttpForbidden = 403,
    sfHttpNotFound = 404,
    sfHttpRangeNotSatisfiable = 407,
    sfHttpInternalServerError = 500,
    sfHttpNotImplemented = 501,
    sfHttpBadGateway = 502,
    sfHttpServiceNotAvailable = 503,
    sfHttpGatewayTimeout = 504,
    sfHttpVersionNotSupported = 505,
    sfHttpInvalidResponse = 1000,
    sfHttpConnectionFailed = 1001,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum sfSocketStatus {
    sfSocketDone = 0,
    sfSocketNotReady = 1,
    sfSocketPartial = 2,
    sfSocketDisconnected = 3,
    sfSocketError = 4,
}
extern "C" {
    pub static sfIpAddress_None: sfIpAddress;
    pub static sfIpAddress_LocalHost: sfIpAddress;
    pub static sfIpAddress_Broadcast: sfIpAddress;
}
extern "C" {
    pub fn sfIpAddress_fromString(address: *const ::std::os::raw::c_char)
     -> sfIpAddress;
    pub fn sfIpAddress_fromBytes(byte0: sfUint8, byte1: sfUint8,
                                 byte2: sfUint8, byte3: sfUint8)
     -> sfIpAddress;
    pub fn sfIpAddress_fromInteger(address: sfUint32) -> sfIpAddress;
    pub fn sfIpAddress_toString(address: sfIpAddress,
                                string: *mut ::std::os::raw::c_char);
    pub fn sfIpAddress_toInteger(address: sfIpAddress) -> sfUint32;
    pub fn sfIpAddress_getLocalAddress() -> sfIpAddress;
    pub fn sfIpAddress_getPublicAddress(timeout: sfTime) -> sfIpAddress;
    pub fn sfFtpListingResponse_destroy(ftpListingResponse:
                                            *mut sfFtpListingResponse);
    pub fn sfFtpListingResponse_isOk(ftpListingResponse:
                                         *const sfFtpListingResponse)
     -> sfBool;
    pub fn sfFtpListingResponse_getStatus(ftpListingResponse:
                                              *const sfFtpListingResponse)
     -> sfFtpStatus;
    pub fn sfFtpListingResponse_getMessage(ftpListingResponse:
                                               *const sfFtpListingResponse)
     -> *const ::std::os::raw::c_char;
    pub fn sfFtpListingResponse_getCount(ftpListingResponse:
                                             *const sfFtpListingResponse)
     -> usize;
    pub fn sfFtpListingResponse_getName(ftpListingResponse:
                                            *const sfFtpListingResponse,
                                        index: usize)
     -> *const ::std::os::raw::c_char;
    pub fn sfFtpDirectoryResponse_destroy(ftpDirectoryResponse:
                                              *mut sfFtpDirectoryResponse);
    pub fn sfFtpDirectoryResponse_isOk(ftpDirectoryResponse:
                                           *const sfFtpDirectoryResponse)
     -> sfBool;
    pub fn sfFtpDirectoryResponse_getStatus(ftpDirectoryResponse:
                                                *const sfFtpDirectoryResponse)
     -> sfFtpStatus;
    pub fn sfFtpDirectoryResponse_getMessage(ftpDirectoryResponse:
                                                 *const sfFtpDirectoryResponse)
     -> *const ::std::os::raw::c_char;
    pub fn sfFtpDirectoryResponse_getDirectory(ftpDirectoryResponse:
                                                   *const sfFtpDirectoryResponse)
     -> *const ::std::os::raw::c_char;
    pub fn sfFtpResponse_destroy(ftpResponse: *mut sfFtpResponse);
    pub fn sfFtpResponse_isOk(ftpResponse: *const sfFtpResponse) -> sfBool;
    pub fn sfFtpResponse_getStatus(ftpResponse: *const sfFtpResponse)
     -> sfFtpStatus;
    pub fn sfFtpResponse_getMessage(ftpResponse: *const sfFtpResponse)
     -> *const ::std::os::raw::c_char;
    pub fn sfFtp_create() -> *mut sfFtp;
    pub fn sfFtp_destroy(ftp: *mut sfFtp);
    pub fn sfFtp_connect(ftp: *mut sfFtp, server: sfIpAddress,
                         port: ::std::os::raw::c_ushort, timeout: sfTime)
     -> *mut sfFtpResponse;
    pub fn sfFtp_loginAnonymous(ftp: *mut sfFtp) -> *mut sfFtpResponse;
    pub fn sfFtp_login(ftp: *mut sfFtp,
                       userName: *const ::std::os::raw::c_char,
                       password: *const ::std::os::raw::c_char)
     -> *mut sfFtpResponse;
    pub fn sfFtp_disconnect(ftp: *mut sfFtp) -> *mut sfFtpResponse;
    pub fn sfFtp_keepAlive(ftp: *mut sfFtp) -> *mut sfFtpResponse;
    pub fn sfFtp_getWorkingDirectory(ftp: *mut sfFtp)
     -> *mut sfFtpDirectoryResponse;
    pub fn sfFtp_getDirectoryListing(ftp: *mut sfFtp,
                                     directory: *const ::std::os::raw::c_char)
     -> *mut sfFtpListingResponse;
    pub fn sfFtp_changeDirectory(ftp: *mut sfFtp,
                                 directory: *const ::std::os::raw::c_char)
     -> *mut sfFtpResponse;
    pub fn sfFtp_parentDirectory(ftp: *mut sfFtp) -> *mut sfFtpResponse;
    pub fn sfFtp_createDirectory(ftp: *mut sfFtp,
                                 name: *const ::std::os::raw::c_char)
     -> *mut sfFtpResponse;
    pub fn sfFtp_deleteDirectory(ftp: *mut sfFtp,
                                 name: *const ::std::os::raw::c_char)
     -> *mut sfFtpResponse;
    pub fn sfFtp_renameFile(ftp: *mut sfFtp,
                            file: *const ::std::os::raw::c_char,
                            newName: *const ::std::os::raw::c_char)
     -> *mut sfFtpResponse;
    pub fn sfFtp_deleteFile(ftp: *mut sfFtp,
                            name: *const ::std::os::raw::c_char)
     -> *mut sfFtpResponse;
    pub fn sfFtp_download(ftp: *mut sfFtp,
                          distantFile: *const ::std::os::raw::c_char,
                          destPath: *const ::std::os::raw::c_char,
                          mode: sfFtpTransferMode) -> *mut sfFtpResponse;
    pub fn sfFtp_upload(ftp: *mut sfFtp,
                        localFile: *const ::std::os::raw::c_char,
                        destPath: *const ::std::os::raw::c_char,
                        mode: sfFtpTransferMode) -> *mut sfFtpResponse;
    pub fn sfHttpRequest_create() -> *mut sfHttpRequest;
    pub fn sfHttpRequest_destroy(httpRequest: *mut sfHttpRequest);
    pub fn sfHttpRequest_setField(httpRequest: *mut sfHttpRequest,
                                  field: *const ::std::os::raw::c_char,
                                  value: *const ::std::os::raw::c_char);
    pub fn sfHttpRequest_setMethod(httpRequest: *mut sfHttpRequest,
                                   method: sfHttpMethod);
    pub fn sfHttpRequest_setUri(httpRequest: *mut sfHttpRequest,
                                uri: *const ::std::os::raw::c_char);
    pub fn sfHttpRequest_setHttpVersion(httpRequest: *mut sfHttpRequest,
                                        major: ::std::os::raw::c_uint,
                                        minor: ::std::os::raw::c_uint);
    pub fn sfHttpRequest_setBody(httpRequest: *mut sfHttpRequest,
                                 body: *const ::std::os::raw::c_char);
    pub fn sfHttpResponse_destroy(httpResponse: *mut sfHttpResponse);
    pub fn sfHttpResponse_getField(httpResponse: *const sfHttpResponse,
                                   field: *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
    pub fn sfHttpResponse_getStatus(httpResponse: *const sfHttpResponse)
     -> sfHttpStatus;
    pub fn sfHttpResponse_getMajorVersion(httpResponse: *const sfHttpResponse)
     -> ::std::os::raw::c_uint;
    pub fn sfHttpResponse_getMinorVersion(httpResponse: *const sfHttpResponse)
     -> ::std::os::raw::c_uint;
    pub fn sfHttpResponse_getBody(httpResponse: *const sfHttpResponse)
     -> *const ::std::os::raw::c_char;
    pub fn sfHttp_create() -> *mut sfHttp;
    pub fn sfHttp_destroy(http: *mut sfHttp);
    pub fn sfHttp_setHost(http: *mut sfHttp,
                          host: *const ::std::os::raw::c_char,
                          port: ::std::os::raw::c_ushort);
    pub fn sfHttp_sendRequest(http: *mut sfHttp,
                              request: *const sfHttpRequest, timeout: sfTime)
     -> *mut sfHttpResponse;
    pub fn sfPacket_create() -> *mut sfPacket;
    pub fn sfPacket_copy(packet: *const sfPacket) -> *mut sfPacket;
    pub fn sfPacket_destroy(packet: *mut sfPacket);
    pub fn sfPacket_append(packet: *mut sfPacket,
                           data: *const ::std::os::raw::c_void,
                           sizeInBytes: usize);
    pub fn sfPacket_clear(packet: *mut sfPacket);
    pub fn sfPacket_getData(packet: *const sfPacket)
     -> *const ::std::os::raw::c_void;
    pub fn sfPacket_getDataSize(packet: *const sfPacket) -> usize;
    pub fn sfPacket_endOfPacket(packet: *const sfPacket) -> sfBool;
    pub fn sfPacket_canRead(packet: *const sfPacket) -> sfBool;
    pub fn sfPacket_readBool(packet: *mut sfPacket) -> sfBool;
    pub fn sfPacket_readInt8(packet: *mut sfPacket) -> sfInt8;
    pub fn sfPacket_readUint8(packet: *mut sfPacket) -> sfUint8;
    pub fn sfPacket_readInt16(packet: *mut sfPacket) -> sfInt16;
    pub fn sfPacket_readUint16(packet: *mut sfPacket) -> sfUint16;
    pub fn sfPacket_readInt32(packet: *mut sfPacket) -> sfInt32;
    pub fn sfPacket_readUint32(packet: *mut sfPacket) -> sfUint32;
    pub fn sfPacket_readFloat(packet: *mut sfPacket) -> f32;
    pub fn sfPacket_readDouble(packet: *mut sfPacket) -> f64;
    pub fn sfPacket_readString(packet: *mut sfPacket,
                               string: *mut ::std::os::raw::c_char);
    pub fn sfPacket_readWideString(packet: *mut sfPacket,
                                   string: *mut wchar_t);
    pub fn sfPacket_writeBool(packet: *mut sfPacket, arg1: sfBool);
    pub fn sfPacket_writeInt8(packet: *mut sfPacket, arg1: sfInt8);
    pub fn sfPacket_writeUint8(packet: *mut sfPacket, arg1: sfUint8);
    pub fn sfPacket_writeInt16(packet: *mut sfPacket, arg1: sfInt16);
    pub fn sfPacket_writeUint16(packet: *mut sfPacket, arg1: sfUint16);
    pub fn sfPacket_writeInt32(packet: *mut sfPacket, arg1: sfInt32);
    pub fn sfPacket_writeUint32(packet: *mut sfPacket, arg1: sfUint32);
    pub fn sfPacket_writeFloat(packet: *mut sfPacket, arg1: f32);
    pub fn sfPacket_writeDouble(packet: *mut sfPacket, arg1: f64);
    pub fn sfPacket_writeString(packet: *mut sfPacket,
                                string: *const ::std::os::raw::c_char);
    pub fn sfPacket_writeWideString(packet: *mut sfPacket,
                                    string: *const wchar_t);
    pub fn sfSocketSelector_create() -> *mut sfSocketSelector;
    pub fn sfSocketSelector_copy(selector: *const sfSocketSelector)
     -> *mut sfSocketSelector;
    pub fn sfSocketSelector_destroy(selector: *mut sfSocketSelector);
    pub fn sfSocketSelector_addTcpListener(selector: *mut sfSocketSelector,
                                           socket: *mut sfTcpListener);
    pub fn sfSocketSelector_addTcpSocket(selector: *mut sfSocketSelector,
                                         socket: *mut sfTcpSocket);
    pub fn sfSocketSelector_addUdpSocket(selector: *mut sfSocketSelector,
                                         socket: *mut sfUdpSocket);
    pub fn sfSocketSelector_removeTcpListener(selector: *mut sfSocketSelector,
                                              socket: *mut sfTcpListener);
    pub fn sfSocketSelector_removeTcpSocket(selector: *mut sfSocketSelector,
                                            socket: *mut sfTcpSocket);
    pub fn sfSocketSelector_removeUdpSocket(selector: *mut sfSocketSelector,
                                            socket: *mut sfUdpSocket);
    pub fn sfSocketSelector_clear(selector: *mut sfSocketSelector);
    pub fn sfSocketSelector_wait(selector: *mut sfSocketSelector,
                                 timeout: sfTime) -> sfBool;
    pub fn sfSocketSelector_isTcpListenerReady(selector:
                                                   *const sfSocketSelector,
                                               socket: *mut sfTcpListener)
     -> sfBool;
    pub fn sfSocketSelector_isTcpSocketReady(selector:
                                                 *const sfSocketSelector,
                                             socket: *mut sfTcpSocket)
     -> sfBool;
    pub fn sfSocketSelector_isUdpSocketReady(selector:
                                                 *const sfSocketSelector,
                                             socket: *mut sfUdpSocket)
     -> sfBool;
    pub fn sfTcpListener_create() -> *mut sfTcpListener;
    pub fn sfTcpListener_destroy(listener: *mut sfTcpListener);
    pub fn sfTcpListener_setBlocking(listener: *mut sfTcpListener,
                                     blocking: sfBool);
    pub fn sfTcpListener_isBlocking(listener: *const sfTcpListener) -> sfBool;
    pub fn sfTcpListener_getLocalPort(listener: *const sfTcpListener)
     -> ::std::os::raw::c_ushort;
    pub fn sfTcpListener_listen(listener: *mut sfTcpListener,
                                port: ::std::os::raw::c_ushort)
     -> sfSocketStatus;
    pub fn sfTcpListener_accept(listener: *mut sfTcpListener,
                                connected: *mut *mut sfTcpSocket)
     -> sfSocketStatus;
    pub fn sfTcpSocket_create() -> *mut sfTcpSocket;
    pub fn sfTcpSocket_destroy(socket: *mut sfTcpSocket);
    pub fn sfTcpSocket_setBlocking(socket: *mut sfTcpSocket,
                                   blocking: sfBool);
    pub fn sfTcpSocket_isBlocking(socket: *const sfTcpSocket) -> sfBool;
    pub fn sfTcpSocket_getLocalPort(socket: *const sfTcpSocket)
     -> ::std::os::raw::c_ushort;
    pub fn sfTcpSocket_getRemoteAddress(socket: *const sfTcpSocket)
     -> sfIpAddress;
    pub fn sfTcpSocket_getRemotePort(socket: *const sfTcpSocket)
     -> ::std::os::raw::c_ushort;
    pub fn sfTcpSocket_connect(socket: *mut sfTcpSocket, host: sfIpAddress,
                               port: ::std::os::raw::c_ushort,
                               timeout: sfTime) -> sfSocketStatus;
    pub fn sfTcpSocket_disconnect(socket: *mut sfTcpSocket);
    pub fn sfTcpSocket_send(socket: *mut sfTcpSocket,
                            data: *const ::std::os::raw::c_void, size: usize)
     -> sfSocketStatus;
    pub fn sfTcpSocket_sendPartial(socket: *mut sfTcpSocket,
                                   data: *const ::std::os::raw::c_void,
                                   size: usize, sent: *mut usize)
     -> sfSocketStatus;
    pub fn sfTcpSocket_receive(socket: *mut sfTcpSocket,
                               data: *mut ::std::os::raw::c_void,
                               maxSize: usize, sizeReceived: *mut usize)
     -> sfSocketStatus;
    pub fn sfTcpSocket_sendPacket(socket: *mut sfTcpSocket,
                                  packet: *mut sfPacket) -> sfSocketStatus;
    pub fn sfTcpSocket_receivePacket(socket: *mut sfTcpSocket,
                                     packet: *mut sfPacket) -> sfSocketStatus;
    pub fn sfUdpSocket_create() -> *mut sfUdpSocket;
    pub fn sfUdpSocket_destroy(socket: *mut sfUdpSocket);
    pub fn sfUdpSocket_setBlocking(socket: *mut sfUdpSocket,
                                   blocking: sfBool);
    pub fn sfUdpSocket_isBlocking(socket: *const sfUdpSocket) -> sfBool;
    pub fn sfUdpSocket_getLocalPort(socket: *const sfUdpSocket)
     -> ::std::os::raw::c_ushort;
    pub fn sfUdpSocket_bind(socket: *mut sfUdpSocket,
                            port: ::std::os::raw::c_ushort) -> sfSocketStatus;
    pub fn sfUdpSocket_unbind(socket: *mut sfUdpSocket);
    pub fn sfUdpSocket_send(socket: *mut sfUdpSocket,
                            data: *const ::std::os::raw::c_void, size: usize,
                            address: sfIpAddress,
                            port: ::std::os::raw::c_ushort) -> sfSocketStatus;
    pub fn sfUdpSocket_receive(socket: *mut sfUdpSocket,
                               data: *mut ::std::os::raw::c_void,
                               maxSize: usize, sizeReceived: *mut usize,
                               address: *mut sfIpAddress,
                               port: *mut ::std::os::raw::c_ushort)
     -> sfSocketStatus;
    pub fn sfUdpSocket_sendPacket(socket: *mut sfUdpSocket,
                                  packet: *mut sfPacket, address: sfIpAddress,
                                  port: ::std::os::raw::c_ushort)
     -> sfSocketStatus;
    pub fn sfUdpSocket_receivePacket(socket: *mut sfUdpSocket,
                                     packet: *mut sfPacket,
                                     address: *mut sfIpAddress,
                                     port: *mut ::std::os::raw::c_ushort)
     -> sfSocketStatus;
    pub fn sfUdpSocket_maxDatagramSize() -> ::std::os::raw::c_uint;
}
