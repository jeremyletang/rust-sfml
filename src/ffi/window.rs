/* automatically generated by rust-bindgen 0.55.1 */

// manually added
#![allow(
    non_snake_case,
    non_camel_case_types,
    non_upper_case_globals,
    deref_nullptr,
    missing_docs,
    trivial_casts,
    missing_debug_implementations
)]

use crate::ffi::system::*; // manually added

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sfContext {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sfCursor {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sfWindow {
    _unused: [u8; 0],
}
extern "C" {
    pub fn sfClipboard_getString() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sfClipboard_getUnicodeString() -> *const sfUint32;
}
extern "C" {
    pub fn sfClipboard_setString(text: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn sfClipboard_setUnicodeString(text: *const sfUint32);
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct sfJoystickIdentification {
    pub name: *const ::std::os::raw::c_char,
    pub vendorId: ::std::os::raw::c_uint,
    pub productId: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_sfJoystickIdentification() {
    assert_eq!(
        ::std::mem::size_of::<sfJoystickIdentification>(),
        16usize,
        concat!("Size of: ", stringify!(sfJoystickIdentification))
    );
    assert_eq!(
        ::std::mem::align_of::<sfJoystickIdentification>(),
        8usize,
        concat!("Alignment of ", stringify!(sfJoystickIdentification))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfJoystickIdentification>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sfJoystickIdentification),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sfJoystickIdentification>())).vendorId as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sfJoystickIdentification),
            "::",
            stringify!(vendorId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sfJoystickIdentification>())).productId as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sfJoystickIdentification),
            "::",
            stringify!(productId)
        )
    );
}
pub const sfJoystickCount: ::std::os::raw::c_uint = 8;
pub const sfJoystickButtonCount: ::std::os::raw::c_uint = 32;
pub const sfJoystickAxisCount: ::std::os::raw::c_uint = 8;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub const sfJoystickAxis_sfJoystickX: sfJoystickAxis = 0;
pub const sfJoystickAxis_sfJoystickY: sfJoystickAxis = 1;
pub const sfJoystickAxis_sfJoystickZ: sfJoystickAxis = 2;
pub const sfJoystickAxis_sfJoystickR: sfJoystickAxis = 3;
pub const sfJoystickAxis_sfJoystickU: sfJoystickAxis = 4;
pub const sfJoystickAxis_sfJoystickV: sfJoystickAxis = 5;
pub const sfJoystickAxis_sfJoystickPovX: sfJoystickAxis = 6;
pub const sfJoystickAxis_sfJoystickPovY: sfJoystickAxis = 7;
pub type sfJoystickAxis = ::std::os::raw::c_uint;
extern "C" {
    pub fn sfJoystick_isConnected(joystick: ::std::os::raw::c_uint) -> sfBool;
}
extern "C" {
    pub fn sfJoystick_getButtonCount(joystick: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sfJoystick_hasAxis(joystick: ::std::os::raw::c_uint, axis: sfJoystickAxis) -> sfBool;
}
extern "C" {
    pub fn sfJoystick_isButtonPressed(
        joystick: ::std::os::raw::c_uint,
        button: ::std::os::raw::c_uint,
    ) -> sfBool;
}
extern "C" {
    pub fn sfJoystick_getAxisPosition(
        joystick: ::std::os::raw::c_uint,
        axis: sfJoystickAxis,
    ) -> f32;
}
extern "C" {
    pub fn sfJoystick_getIdentification(
        joystick: ::std::os::raw::c_uint,
    ) -> sfJoystickIdentification;
}
extern "C" {
    pub fn sfJoystick_update();
}
pub const sfKeyCode_sfKeyUnknown: sfKeyCode = -1;
pub const sfKeyCode_sfKeyA: sfKeyCode = 0;
pub const sfKeyCode_sfKeyB: sfKeyCode = 1;
pub const sfKeyCode_sfKeyC: sfKeyCode = 2;
pub const sfKeyCode_sfKeyD: sfKeyCode = 3;
pub const sfKeyCode_sfKeyE: sfKeyCode = 4;
pub const sfKeyCode_sfKeyF: sfKeyCode = 5;
pub const sfKeyCode_sfKeyG: sfKeyCode = 6;
pub const sfKeyCode_sfKeyH: sfKeyCode = 7;
pub const sfKeyCode_sfKeyI: sfKeyCode = 8;
pub const sfKeyCode_sfKeyJ: sfKeyCode = 9;
pub const sfKeyCode_sfKeyK: sfKeyCode = 10;
pub const sfKeyCode_sfKeyL: sfKeyCode = 11;
pub const sfKeyCode_sfKeyM: sfKeyCode = 12;
pub const sfKeyCode_sfKeyN: sfKeyCode = 13;
pub const sfKeyCode_sfKeyO: sfKeyCode = 14;
pub const sfKeyCode_sfKeyP: sfKeyCode = 15;
pub const sfKeyCode_sfKeyQ: sfKeyCode = 16;
pub const sfKeyCode_sfKeyR: sfKeyCode = 17;
pub const sfKeyCode_sfKeyS: sfKeyCode = 18;
pub const sfKeyCode_sfKeyT: sfKeyCode = 19;
pub const sfKeyCode_sfKeyU: sfKeyCode = 20;
pub const sfKeyCode_sfKeyV: sfKeyCode = 21;
pub const sfKeyCode_sfKeyW: sfKeyCode = 22;
pub const sfKeyCode_sfKeyX: sfKeyCode = 23;
pub const sfKeyCode_sfKeyY: sfKeyCode = 24;
pub const sfKeyCode_sfKeyZ: sfKeyCode = 25;
pub const sfKeyCode_sfKeyNum0: sfKeyCode = 26;
pub const sfKeyCode_sfKeyNum1: sfKeyCode = 27;
pub const sfKeyCode_sfKeyNum2: sfKeyCode = 28;
pub const sfKeyCode_sfKeyNum3: sfKeyCode = 29;
pub const sfKeyCode_sfKeyNum4: sfKeyCode = 30;
pub const sfKeyCode_sfKeyNum5: sfKeyCode = 31;
pub const sfKeyCode_sfKeyNum6: sfKeyCode = 32;
pub const sfKeyCode_sfKeyNum7: sfKeyCode = 33;
pub const sfKeyCode_sfKeyNum8: sfKeyCode = 34;
pub const sfKeyCode_sfKeyNum9: sfKeyCode = 35;
pub const sfKeyCode_sfKeyEscape: sfKeyCode = 36;
pub const sfKeyCode_sfKeyLControl: sfKeyCode = 37;
pub const sfKeyCode_sfKeyLShift: sfKeyCode = 38;
pub const sfKeyCode_sfKeyLAlt: sfKeyCode = 39;
pub const sfKeyCode_sfKeyLSystem: sfKeyCode = 40;
pub const sfKeyCode_sfKeyRControl: sfKeyCode = 41;
pub const sfKeyCode_sfKeyRShift: sfKeyCode = 42;
pub const sfKeyCode_sfKeyRAlt: sfKeyCode = 43;
pub const sfKeyCode_sfKeyRSystem: sfKeyCode = 44;
pub const sfKeyCode_sfKeyMenu: sfKeyCode = 45;
pub const sfKeyCode_sfKeyLBracket: sfKeyCode = 46;
pub const sfKeyCode_sfKeyRBracket: sfKeyCode = 47;
pub const sfKeyCode_sfKeySemicolon: sfKeyCode = 48;
pub const sfKeyCode_sfKeyComma: sfKeyCode = 49;
pub const sfKeyCode_sfKeyPeriod: sfKeyCode = 50;
pub const sfKeyCode_sfKeyQuote: sfKeyCode = 51;
pub const sfKeyCode_sfKeySlash: sfKeyCode = 52;
pub const sfKeyCode_sfKeyBackslash: sfKeyCode = 53;
pub const sfKeyCode_sfKeyTilde: sfKeyCode = 54;
pub const sfKeyCode_sfKeyEqual: sfKeyCode = 55;
pub const sfKeyCode_sfKeyHyphen: sfKeyCode = 56;
pub const sfKeyCode_sfKeySpace: sfKeyCode = 57;
pub const sfKeyCode_sfKeyEnter: sfKeyCode = 58;
pub const sfKeyCode_sfKeyBackspace: sfKeyCode = 59;
pub const sfKeyCode_sfKeyTab: sfKeyCode = 60;
pub const sfKeyCode_sfKeyPageUp: sfKeyCode = 61;
pub const sfKeyCode_sfKeyPageDown: sfKeyCode = 62;
pub const sfKeyCode_sfKeyEnd: sfKeyCode = 63;
pub const sfKeyCode_sfKeyHome: sfKeyCode = 64;
pub const sfKeyCode_sfKeyInsert: sfKeyCode = 65;
pub const sfKeyCode_sfKeyDelete: sfKeyCode = 66;
pub const sfKeyCode_sfKeyAdd: sfKeyCode = 67;
pub const sfKeyCode_sfKeySubtract: sfKeyCode = 68;
pub const sfKeyCode_sfKeyMultiply: sfKeyCode = 69;
pub const sfKeyCode_sfKeyDivide: sfKeyCode = 70;
pub const sfKeyCode_sfKeyLeft: sfKeyCode = 71;
pub const sfKeyCode_sfKeyRight: sfKeyCode = 72;
pub const sfKeyCode_sfKeyUp: sfKeyCode = 73;
pub const sfKeyCode_sfKeyDown: sfKeyCode = 74;
pub const sfKeyCode_sfKeyNumpad0: sfKeyCode = 75;
pub const sfKeyCode_sfKeyNumpad1: sfKeyCode = 76;
pub const sfKeyCode_sfKeyNumpad2: sfKeyCode = 77;
pub const sfKeyCode_sfKeyNumpad3: sfKeyCode = 78;
pub const sfKeyCode_sfKeyNumpad4: sfKeyCode = 79;
pub const sfKeyCode_sfKeyNumpad5: sfKeyCode = 80;
pub const sfKeyCode_sfKeyNumpad6: sfKeyCode = 81;
pub const sfKeyCode_sfKeyNumpad7: sfKeyCode = 82;
pub const sfKeyCode_sfKeyNumpad8: sfKeyCode = 83;
pub const sfKeyCode_sfKeyNumpad9: sfKeyCode = 84;
pub const sfKeyCode_sfKeyF1: sfKeyCode = 85;
pub const sfKeyCode_sfKeyF2: sfKeyCode = 86;
pub const sfKeyCode_sfKeyF3: sfKeyCode = 87;
pub const sfKeyCode_sfKeyF4: sfKeyCode = 88;
pub const sfKeyCode_sfKeyF5: sfKeyCode = 89;
pub const sfKeyCode_sfKeyF6: sfKeyCode = 90;
pub const sfKeyCode_sfKeyF7: sfKeyCode = 91;
pub const sfKeyCode_sfKeyF8: sfKeyCode = 92;
pub const sfKeyCode_sfKeyF9: sfKeyCode = 93;
pub const sfKeyCode_sfKeyF10: sfKeyCode = 94;
pub const sfKeyCode_sfKeyF11: sfKeyCode = 95;
pub const sfKeyCode_sfKeyF12: sfKeyCode = 96;
pub const sfKeyCode_sfKeyF13: sfKeyCode = 97;
pub const sfKeyCode_sfKeyF14: sfKeyCode = 98;
pub const sfKeyCode_sfKeyF15: sfKeyCode = 99;
pub const sfKeyCode_sfKeyPause: sfKeyCode = 100;
pub const sfKeyCode_sfKeyCount: sfKeyCode = 101;
pub const sfKeyCode_sfKeyDash: sfKeyCode = 56;
pub const sfKeyCode_sfKeyBack: sfKeyCode = 59;
pub const sfKeyCode_sfKeyBackSlash: sfKeyCode = 53;
pub const sfKeyCode_sfKeySemiColon: sfKeyCode = 48;
pub const sfKeyCode_sfKeyReturn: sfKeyCode = 58;
pub type sfKeyCode = ::std::os::raw::c_int;
extern "C" {
    pub fn sfKeyboard_isKeyPressed(key: sfKeyCode) -> sfBool;
}
extern "C" {
    pub fn sfKeyboard_setVirtualKeyboardVisible(visible: sfBool);
}
pub const sfMouseButton_sfMouseLeft: sfMouseButton = 0;
pub const sfMouseButton_sfMouseRight: sfMouseButton = 1;
pub const sfMouseButton_sfMouseMiddle: sfMouseButton = 2;
pub const sfMouseButton_sfMouseXButton1: sfMouseButton = 3;
pub const sfMouseButton_sfMouseXButton2: sfMouseButton = 4;
pub const sfMouseButton_sfMouseButtonCount: sfMouseButton = 5;
pub type sfMouseButton = ::std::os::raw::c_uint;
pub const sfMouseWheel_sfMouseVerticalWheel: sfMouseWheel = 0;
pub const sfMouseWheel_sfMouseHorizontalWheel: sfMouseWheel = 1;
pub type sfMouseWheel = ::std::os::raw::c_uint;
extern "C" {
    pub fn sfMouse_isButtonPressed(button: sfMouseButton) -> sfBool;
}
extern "C" {
    pub fn sfMouse_getPosition(relativeTo: *const sfWindow) -> sfVector2i;
}
extern "C" {
    pub fn sfMouse_setPosition(position: sfVector2i, relativeTo: *const sfWindow);
}
pub const sfSensorType_sfSensorAccelerometer: sfSensorType = 0;
pub const sfSensorType_sfSensorGyroscope: sfSensorType = 1;
pub const sfSensorType_sfSensorMagnetometer: sfSensorType = 2;
pub const sfSensorType_sfSensorGravity: sfSensorType = 3;
pub const sfSensorType_sfSensorUserAcceleration: sfSensorType = 4;
pub const sfSensorType_sfSensorOrientation: sfSensorType = 5;
pub const sfSensorType_sfSensorCount: sfSensorType = 6;
pub type sfSensorType = ::std::os::raw::c_uint;
extern "C" {
    pub fn sfSensor_isAvailable(sensor: sfSensorType) -> sfBool;
}
extern "C" {
    pub fn sfSensor_setEnabled(sensor: sfSensorType, enabled: sfBool);
}
extern "C" {
    pub fn sfSensor_getValue(sensor: sfSensorType) -> sfVector3f;
}
pub const sfEventType_sfEvtClosed: sfEventType = 0;
pub const sfEventType_sfEvtResized: sfEventType = 1;
pub const sfEventType_sfEvtLostFocus: sfEventType = 2;
pub const sfEventType_sfEvtGainedFocus: sfEventType = 3;
pub const sfEventType_sfEvtTextEntered: sfEventType = 4;
pub const sfEventType_sfEvtKeyPressed: sfEventType = 5;
pub const sfEventType_sfEvtKeyReleased: sfEventType = 6;
pub const sfEventType_sfEvtMouseWheelMoved: sfEventType = 7;
pub const sfEventType_sfEvtMouseWheelScrolled: sfEventType = 8;
pub const sfEventType_sfEvtMouseButtonPressed: sfEventType = 9;
pub const sfEventType_sfEvtMouseButtonReleased: sfEventType = 10;
pub const sfEventType_sfEvtMouseMoved: sfEventType = 11;
pub const sfEventType_sfEvtMouseEntered: sfEventType = 12;
pub const sfEventType_sfEvtMouseLeft: sfEventType = 13;
pub const sfEventType_sfEvtJoystickButtonPressed: sfEventType = 14;
pub const sfEventType_sfEvtJoystickButtonReleased: sfEventType = 15;
pub const sfEventType_sfEvtJoystickMoved: sfEventType = 16;
pub const sfEventType_sfEvtJoystickConnected: sfEventType = 17;
pub const sfEventType_sfEvtJoystickDisconnected: sfEventType = 18;
pub const sfEventType_sfEvtTouchBegan: sfEventType = 19;
pub const sfEventType_sfEvtTouchMoved: sfEventType = 20;
pub const sfEventType_sfEvtTouchEnded: sfEventType = 21;
pub const sfEventType_sfEvtSensorChanged: sfEventType = 22;
pub const sfEventType_sfEvtCount: sfEventType = 23;
pub type sfEventType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct sfKeyEvent {
    pub type_: sfEventType,
    pub code: sfKeyCode,
    pub alt: sfBool,
    pub control: sfBool,
    pub shift: sfBool,
    pub system: sfBool,
}
#[test]
fn bindgen_test_layout_sfKeyEvent() {
    assert_eq!(
        ::std::mem::size_of::<sfKeyEvent>(),
        24usize,
        concat!("Size of: ", stringify!(sfKeyEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<sfKeyEvent>(),
        4usize,
        concat!("Alignment of ", stringify!(sfKeyEvent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfKeyEvent>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sfKeyEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfKeyEvent>())).code as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sfKeyEvent),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfKeyEvent>())).alt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sfKeyEvent),
            "::",
            stringify!(alt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfKeyEvent>())).control as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sfKeyEvent),
            "::",
            stringify!(control)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfKeyEvent>())).shift as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sfKeyEvent),
            "::",
            stringify!(shift)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfKeyEvent>())).system as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sfKeyEvent),
            "::",
            stringify!(system)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct sfTextEvent {
    pub type_: sfEventType,
    pub unicode: sfUint32,
}
#[test]
fn bindgen_test_layout_sfTextEvent() {
    assert_eq!(
        ::std::mem::size_of::<sfTextEvent>(),
        8usize,
        concat!("Size of: ", stringify!(sfTextEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<sfTextEvent>(),
        4usize,
        concat!("Alignment of ", stringify!(sfTextEvent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfTextEvent>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sfTextEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfTextEvent>())).unicode as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sfTextEvent),
            "::",
            stringify!(unicode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct sfMouseMoveEvent {
    pub type_: sfEventType,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sfMouseMoveEvent() {
    assert_eq!(
        ::std::mem::size_of::<sfMouseMoveEvent>(),
        12usize,
        concat!("Size of: ", stringify!(sfMouseMoveEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<sfMouseMoveEvent>(),
        4usize,
        concat!("Alignment of ", stringify!(sfMouseMoveEvent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfMouseMoveEvent>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sfMouseMoveEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfMouseMoveEvent>())).x as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sfMouseMoveEvent),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfMouseMoveEvent>())).y as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sfMouseMoveEvent),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct sfMouseButtonEvent {
    pub type_: sfEventType,
    pub button: sfMouseButton,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sfMouseButtonEvent() {
    assert_eq!(
        ::std::mem::size_of::<sfMouseButtonEvent>(),
        16usize,
        concat!("Size of: ", stringify!(sfMouseButtonEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<sfMouseButtonEvent>(),
        4usize,
        concat!("Alignment of ", stringify!(sfMouseButtonEvent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfMouseButtonEvent>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sfMouseButtonEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfMouseButtonEvent>())).button as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sfMouseButtonEvent),
            "::",
            stringify!(button)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfMouseButtonEvent>())).x as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sfMouseButtonEvent),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfMouseButtonEvent>())).y as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sfMouseButtonEvent),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct sfMouseWheelEvent {
    pub type_: sfEventType,
    pub delta: ::std::os::raw::c_int,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sfMouseWheelEvent() {
    assert_eq!(
        ::std::mem::size_of::<sfMouseWheelEvent>(),
        16usize,
        concat!("Size of: ", stringify!(sfMouseWheelEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<sfMouseWheelEvent>(),
        4usize,
        concat!("Alignment of ", stringify!(sfMouseWheelEvent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfMouseWheelEvent>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sfMouseWheelEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfMouseWheelEvent>())).delta as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sfMouseWheelEvent),
            "::",
            stringify!(delta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfMouseWheelEvent>())).x as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sfMouseWheelEvent),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfMouseWheelEvent>())).y as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sfMouseWheelEvent),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, PartialEq)]
pub struct sfMouseWheelScrollEvent {
    pub type_: sfEventType,
    pub wheel: sfMouseWheel,
    pub delta: f32,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sfMouseWheelScrollEvent() {
    assert_eq!(
        ::std::mem::size_of::<sfMouseWheelScrollEvent>(),
        20usize,
        concat!("Size of: ", stringify!(sfMouseWheelScrollEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<sfMouseWheelScrollEvent>(),
        4usize,
        concat!("Alignment of ", stringify!(sfMouseWheelScrollEvent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfMouseWheelScrollEvent>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sfMouseWheelScrollEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfMouseWheelScrollEvent>())).wheel as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sfMouseWheelScrollEvent),
            "::",
            stringify!(wheel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfMouseWheelScrollEvent>())).delta as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sfMouseWheelScrollEvent),
            "::",
            stringify!(delta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfMouseWheelScrollEvent>())).x as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sfMouseWheelScrollEvent),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfMouseWheelScrollEvent>())).y as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sfMouseWheelScrollEvent),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, PartialEq)]
pub struct sfJoystickMoveEvent {
    pub type_: sfEventType,
    pub joystickId: ::std::os::raw::c_uint,
    pub axis: sfJoystickAxis,
    pub position: f32,
}
#[test]
fn bindgen_test_layout_sfJoystickMoveEvent() {
    assert_eq!(
        ::std::mem::size_of::<sfJoystickMoveEvent>(),
        16usize,
        concat!("Size of: ", stringify!(sfJoystickMoveEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<sfJoystickMoveEvent>(),
        4usize,
        concat!("Alignment of ", stringify!(sfJoystickMoveEvent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfJoystickMoveEvent>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sfJoystickMoveEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfJoystickMoveEvent>())).joystickId as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sfJoystickMoveEvent),
            "::",
            stringify!(joystickId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfJoystickMoveEvent>())).axis as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sfJoystickMoveEvent),
            "::",
            stringify!(axis)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfJoystickMoveEvent>())).position as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sfJoystickMoveEvent),
            "::",
            stringify!(position)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct sfJoystickButtonEvent {
    pub type_: sfEventType,
    pub joystickId: ::std::os::raw::c_uint,
    pub button: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_sfJoystickButtonEvent() {
    assert_eq!(
        ::std::mem::size_of::<sfJoystickButtonEvent>(),
        12usize,
        concat!("Size of: ", stringify!(sfJoystickButtonEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<sfJoystickButtonEvent>(),
        4usize,
        concat!("Alignment of ", stringify!(sfJoystickButtonEvent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfJoystickButtonEvent>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sfJoystickButtonEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sfJoystickButtonEvent>())).joystickId as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sfJoystickButtonEvent),
            "::",
            stringify!(joystickId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfJoystickButtonEvent>())).button as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sfJoystickButtonEvent),
            "::",
            stringify!(button)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct sfJoystickConnectEvent {
    pub type_: sfEventType,
    pub joystickId: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_sfJoystickConnectEvent() {
    assert_eq!(
        ::std::mem::size_of::<sfJoystickConnectEvent>(),
        8usize,
        concat!("Size of: ", stringify!(sfJoystickConnectEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<sfJoystickConnectEvent>(),
        4usize,
        concat!("Alignment of ", stringify!(sfJoystickConnectEvent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfJoystickConnectEvent>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sfJoystickConnectEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sfJoystickConnectEvent>())).joystickId as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sfJoystickConnectEvent),
            "::",
            stringify!(joystickId)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct sfSizeEvent {
    pub type_: sfEventType,
    pub width: ::std::os::raw::c_uint,
    pub height: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_sfSizeEvent() {
    assert_eq!(
        ::std::mem::size_of::<sfSizeEvent>(),
        12usize,
        concat!("Size of: ", stringify!(sfSizeEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<sfSizeEvent>(),
        4usize,
        concat!("Alignment of ", stringify!(sfSizeEvent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfSizeEvent>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sfSizeEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfSizeEvent>())).width as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sfSizeEvent),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfSizeEvent>())).height as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sfSizeEvent),
            "::",
            stringify!(height)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct sfTouchEvent {
    pub type_: sfEventType,
    pub finger: ::std::os::raw::c_uint,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sfTouchEvent() {
    assert_eq!(
        ::std::mem::size_of::<sfTouchEvent>(),
        16usize,
        concat!("Size of: ", stringify!(sfTouchEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<sfTouchEvent>(),
        4usize,
        concat!("Alignment of ", stringify!(sfTouchEvent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfTouchEvent>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sfTouchEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfTouchEvent>())).finger as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sfTouchEvent),
            "::",
            stringify!(finger)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfTouchEvent>())).x as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sfTouchEvent),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfTouchEvent>())).y as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sfTouchEvent),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, PartialEq)]
pub struct sfSensorEvent {
    pub type_: sfEventType,
    pub sensorType: sfSensorType,
    pub x: f32,
    pub y: f32,
    pub z: f32,
}
#[test]
fn bindgen_test_layout_sfSensorEvent() {
    assert_eq!(
        ::std::mem::size_of::<sfSensorEvent>(),
        20usize,
        concat!("Size of: ", stringify!(sfSensorEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<sfSensorEvent>(),
        4usize,
        concat!("Alignment of ", stringify!(sfSensorEvent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfSensorEvent>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sfSensorEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfSensorEvent>())).sensorType as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sfSensorEvent),
            "::",
            stringify!(sensorType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfSensorEvent>())).x as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sfSensorEvent),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfSensorEvent>())).y as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sfSensorEvent),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfSensorEvent>())).z as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sfSensorEvent),
            "::",
            stringify!(z)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sfEvent {
    pub type_: sfEventType,
    pub size: sfSizeEvent,
    pub key: sfKeyEvent,
    pub text: sfTextEvent,
    pub mouseMove: sfMouseMoveEvent,
    pub mouseButton: sfMouseButtonEvent,
    pub mouseWheel: sfMouseWheelEvent,
    pub mouseWheelScroll: sfMouseWheelScrollEvent,
    pub joystickMove: sfJoystickMoveEvent,
    pub joystickButton: sfJoystickButtonEvent,
    pub joystickConnect: sfJoystickConnectEvent,
    pub touch: sfTouchEvent,
    pub sensor: sfSensorEvent,
    _bindgen_union_align: [u32; 6usize],
}
#[test]
fn bindgen_test_layout_sfEvent() {
    assert_eq!(
        ::std::mem::size_of::<sfEvent>(),
        24usize,
        concat!("Size of: ", stringify!(sfEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<sfEvent>(),
        4usize,
        concat!("Alignment of ", stringify!(sfEvent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfEvent>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sfEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfEvent>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sfEvent),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfEvent>())).key as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sfEvent),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfEvent>())).text as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sfEvent),
            "::",
            stringify!(text)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfEvent>())).mouseMove as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sfEvent),
            "::",
            stringify!(mouseMove)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfEvent>())).mouseButton as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sfEvent),
            "::",
            stringify!(mouseButton)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfEvent>())).mouseWheel as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sfEvent),
            "::",
            stringify!(mouseWheel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfEvent>())).mouseWheelScroll as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sfEvent),
            "::",
            stringify!(mouseWheelScroll)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfEvent>())).joystickMove as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sfEvent),
            "::",
            stringify!(joystickMove)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfEvent>())).joystickButton as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sfEvent),
            "::",
            stringify!(joystickButton)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfEvent>())).joystickConnect as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sfEvent),
            "::",
            stringify!(joystickConnect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfEvent>())).touch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sfEvent),
            "::",
            stringify!(touch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfEvent>())).sensor as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sfEvent),
            "::",
            stringify!(sensor)
        )
    );
}
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct sfVideoMode {
    pub width: ::std::os::raw::c_uint,
    pub height: ::std::os::raw::c_uint,
    pub bitsPerPixel: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_sfVideoMode() {
    assert_eq!(
        ::std::mem::size_of::<sfVideoMode>(),
        12usize,
        concat!("Size of: ", stringify!(sfVideoMode))
    );
    assert_eq!(
        ::std::mem::align_of::<sfVideoMode>(),
        4usize,
        concat!("Alignment of ", stringify!(sfVideoMode))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfVideoMode>())).width as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sfVideoMode),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfVideoMode>())).height as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sfVideoMode),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfVideoMode>())).bitsPerPixel as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sfVideoMode),
            "::",
            stringify!(bitsPerPixel)
        )
    );
}
extern "C" {
    pub fn sfVideoMode_getDesktopMode() -> sfVideoMode;
}
extern "C" {
    pub fn sfVideoMode_getFullscreenModes(count: *mut usize) -> *const sfVideoMode;
}
extern "C" {
    pub fn sfVideoMode_isValid(mode: sfVideoMode) -> sfBool;
}
pub type sfWindowHandle = ::std::os::raw::c_ulong;
pub const sfWindowStyle_sfNone: sfWindowStyle = 0;
pub const sfWindowStyle_sfTitlebar: sfWindowStyle = 1;
pub const sfWindowStyle_sfResize: sfWindowStyle = 2;
pub const sfWindowStyle_sfClose: sfWindowStyle = 4;
pub const sfWindowStyle_sfFullscreen: sfWindowStyle = 8;
pub const sfWindowStyle_sfDefaultStyle: sfWindowStyle = 7;
pub type sfWindowStyle = ::std::os::raw::c_uint;
pub const sfContextAttribute_sfContextDefault: sfContextAttribute = 0;
pub const sfContextAttribute_sfContextCore: sfContextAttribute = 1;
pub const sfContextAttribute_sfContextDebug: sfContextAttribute = 4;
pub type sfContextAttribute = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct sfContextSettings {
    pub depthBits: ::std::os::raw::c_uint,
    pub stencilBits: ::std::os::raw::c_uint,
    pub antialiasingLevel: ::std::os::raw::c_uint,
    pub majorVersion: ::std::os::raw::c_uint,
    pub minorVersion: ::std::os::raw::c_uint,
    pub attributeFlags: sfUint32,
    pub sRgbCapable: sfBool,
}
#[test]
fn bindgen_test_layout_sfContextSettings() {
    assert_eq!(
        ::std::mem::size_of::<sfContextSettings>(),
        28usize,
        concat!("Size of: ", stringify!(sfContextSettings))
    );
    assert_eq!(
        ::std::mem::align_of::<sfContextSettings>(),
        4usize,
        concat!("Alignment of ", stringify!(sfContextSettings))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfContextSettings>())).depthBits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sfContextSettings),
            "::",
            stringify!(depthBits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfContextSettings>())).stencilBits as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sfContextSettings),
            "::",
            stringify!(stencilBits)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sfContextSettings>())).antialiasingLevel as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sfContextSettings),
            "::",
            stringify!(antialiasingLevel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfContextSettings>())).majorVersion as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sfContextSettings),
            "::",
            stringify!(majorVersion)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfContextSettings>())).minorVersion as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sfContextSettings),
            "::",
            stringify!(minorVersion)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sfContextSettings>())).attributeFlags as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sfContextSettings),
            "::",
            stringify!(attributeFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfContextSettings>())).sRgbCapable as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sfContextSettings),
            "::",
            stringify!(sRgbCapable)
        )
    );
}
extern "C" {
    pub fn sfWindow_create(
        mode: sfVideoMode,
        title: *const ::std::os::raw::c_char,
        style: sfUint32,
        settings: *const sfContextSettings,
    ) -> *mut sfWindow;
}
extern "C" {
    pub fn sfWindow_createUnicode(
        mode: sfVideoMode,
        title: *const sfUint32,
        style: sfUint32,
        settings: *const sfContextSettings,
    ) -> *mut sfWindow;
}
extern "C" {
    pub fn sfWindow_createFromHandle(
        handle: sfWindowHandle,
        settings: *const sfContextSettings,
    ) -> *mut sfWindow;
}
extern "C" {
    pub fn sfWindow_destroy(window: *mut sfWindow);
}
extern "C" {
    pub fn sfWindow_close(window: *mut sfWindow);
}
extern "C" {
    pub fn sfWindow_isOpen(window: *const sfWindow) -> sfBool;
}
extern "C" {
    pub fn sfWindow_getSettings(window: *const sfWindow) -> sfContextSettings;
}
extern "C" {
    pub fn sfWindow_pollEvent(window: *mut sfWindow, event: *mut sfEvent) -> sfBool;
}
extern "C" {
    pub fn sfWindow_waitEvent(window: *mut sfWindow, event: *mut sfEvent) -> sfBool;
}
extern "C" {
    pub fn sfWindow_getPosition(window: *const sfWindow) -> sfVector2i;
}
extern "C" {
    pub fn sfWindow_setPosition(window: *mut sfWindow, position: sfVector2i);
}
extern "C" {
    pub fn sfWindow_getSize(window: *const sfWindow) -> sfVector2u;
}
extern "C" {
    pub fn sfWindow_setSize(window: *mut sfWindow, size: sfVector2u);
}
extern "C" {
    pub fn sfWindow_setTitle(window: *mut sfWindow, title: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn sfWindow_setUnicodeTitle(window: *mut sfWindow, title: *const sfUint32);
}
extern "C" {
    pub fn sfWindow_setIcon(
        window: *mut sfWindow,
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
        pixels: *const sfUint8,
    );
}
extern "C" {
    pub fn sfWindow_setVisible(window: *mut sfWindow, visible: sfBool);
}
extern "C" {
    pub fn sfWindow_setVerticalSyncEnabled(window: *mut sfWindow, enabled: sfBool);
}
extern "C" {
    pub fn sfWindow_setMouseCursorVisible(window: *mut sfWindow, visible: sfBool);
}
extern "C" {
    pub fn sfWindow_setMouseCursorGrabbed(window: *mut sfWindow, grabbed: sfBool);
}
extern "C" {
    pub fn sfWindow_setMouseCursor(window: *mut sfWindow, cursor: *const sfCursor);
}
extern "C" {
    pub fn sfWindow_setKeyRepeatEnabled(window: *mut sfWindow, enabled: sfBool);
}
extern "C" {
    pub fn sfWindow_setFramerateLimit(window: *mut sfWindow, limit: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn sfWindow_setJoystickThreshold(window: *mut sfWindow, threshold: f32);
}
extern "C" {
    pub fn sfWindow_setActive(window: *mut sfWindow, active: sfBool) -> sfBool;
}
extern "C" {
    pub fn sfWindow_requestFocus(window: *mut sfWindow);
}
extern "C" {
    pub fn sfWindow_hasFocus(window: *const sfWindow) -> sfBool;
}
extern "C" {
    pub fn sfWindow_display(window: *mut sfWindow);
}
extern "C" {
    pub fn sfWindow_getSystemHandle(window: *const sfWindow) -> sfWindowHandle;
}
extern "C" {
    pub fn sfContext_create() -> *mut sfContext;
}
extern "C" {
    pub fn sfContext_destroy(context: *mut sfContext);
}
extern "C" {
    pub fn sfContext_setActive(context: *mut sfContext, active: sfBool) -> sfBool;
}
extern "C" {
    pub fn sfContext_getSettings(context: *const sfContext) -> sfContextSettings;
}
extern "C" {
    pub fn sfContext_getActiveContextId() -> sfUint64;
}
pub const sfCursorType_sfCursorArrow: sfCursorType = 0;
pub const sfCursorType_sfCursorArrowWait: sfCursorType = 1;
pub const sfCursorType_sfCursorWait: sfCursorType = 2;
pub const sfCursorType_sfCursorText: sfCursorType = 3;
pub const sfCursorType_sfCursorHand: sfCursorType = 4;
pub const sfCursorType_sfCursorSizeHorizontal: sfCursorType = 5;
pub const sfCursorType_sfCursorSizeVertical: sfCursorType = 6;
pub const sfCursorType_sfCursorSizeTopLeftBottomRight: sfCursorType = 7;
pub const sfCursorType_sfCursorSizeBottomLeftTopRight: sfCursorType = 8;
pub const sfCursorType_sfCursorSizeAll: sfCursorType = 9;
pub const sfCursorType_sfCursorCross: sfCursorType = 10;
pub const sfCursorType_sfCursorHelp: sfCursorType = 11;
pub const sfCursorType_sfCursorNotAllowed: sfCursorType = 12;
pub type sfCursorType = ::std::os::raw::c_uint;
extern "C" {
    pub fn sfCursor_createFromPixels(
        pixels: *const sfUint8,
        size: sfVector2u,
        hotspot: sfVector2u,
    ) -> *mut sfCursor;
}
extern "C" {
    pub fn sfCursor_createFromSystem(type_: sfCursorType) -> *mut sfCursor;
}
extern "C" {
    pub fn sfCursor_destroy(cursor: *mut sfCursor);
}
extern "C" {
    pub fn sfTouch_isDown(finger: ::std::os::raw::c_uint) -> sfBool;
}
extern "C" {
    pub fn sfTouch_getPosition(
        finger: ::std::os::raw::c_uint,
        relativeTo: *const sfWindow,
    ) -> sfVector2i;
}
