/* automatically generated by rust-bindgen 0.55.1 */

// <manually added>
#![allow(
    non_snake_case,
    non_camel_case_types,
    non_upper_case_globals,
    deref_nullptr,
    missing_docs,
    trivial_casts
)]

use crate::ffi::{system::*, window::*};
// </manually added>

pub const sfBlendFactor_sfBlendFactorZero: sfBlendFactor = 0;
pub const sfBlendFactor_sfBlendFactorOne: sfBlendFactor = 1;
pub const sfBlendFactor_sfBlendFactorSrcColor: sfBlendFactor = 2;
pub const sfBlendFactor_sfBlendFactorOneMinusSrcColor: sfBlendFactor = 3;
pub const sfBlendFactor_sfBlendFactorDstColor: sfBlendFactor = 4;
pub const sfBlendFactor_sfBlendFactorOneMinusDstColor: sfBlendFactor = 5;
pub const sfBlendFactor_sfBlendFactorSrcAlpha: sfBlendFactor = 6;
pub const sfBlendFactor_sfBlendFactorOneMinusSrcAlpha: sfBlendFactor = 7;
pub const sfBlendFactor_sfBlendFactorDstAlpha: sfBlendFactor = 8;
pub const sfBlendFactor_sfBlendFactorOneMinusDstAlpha: sfBlendFactor = 9;
pub type sfBlendFactor = ::std::os::raw::c_uint;
pub const sfBlendEquation_sfBlendEquationAdd: sfBlendEquation = 0;
pub const sfBlendEquation_sfBlendEquationSubtract: sfBlendEquation = 1;
pub const sfBlendEquation_sfBlendEquationReverseSubtract: sfBlendEquation = 2;
pub type sfBlendEquation = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct sfBlendMode {
    pub colorSrcFactor: sfBlendFactor,
    pub colorDstFactor: sfBlendFactor,
    pub colorEquation: sfBlendEquation,
    pub alphaSrcFactor: sfBlendFactor,
    pub alphaDstFactor: sfBlendFactor,
    pub alphaEquation: sfBlendEquation,
}
#[test]
fn bindgen_test_layout_sfBlendMode() {
    assert_eq!(
        ::std::mem::size_of::<sfBlendMode>(),
        24usize,
        concat!("Size of: ", stringify!(sfBlendMode))
    );
    assert_eq!(
        ::std::mem::align_of::<sfBlendMode>(),
        4usize,
        concat!("Alignment of ", stringify!(sfBlendMode))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfBlendMode>())).colorSrcFactor as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sfBlendMode),
            "::",
            stringify!(colorSrcFactor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfBlendMode>())).colorDstFactor as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sfBlendMode),
            "::",
            stringify!(colorDstFactor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfBlendMode>())).colorEquation as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sfBlendMode),
            "::",
            stringify!(colorEquation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfBlendMode>())).alphaSrcFactor as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sfBlendMode),
            "::",
            stringify!(alphaSrcFactor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfBlendMode>())).alphaDstFactor as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sfBlendMode),
            "::",
            stringify!(alphaDstFactor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfBlendMode>())).alphaEquation as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sfBlendMode),
            "::",
            stringify!(alphaEquation)
        )
    );
}
extern "C" {
    pub static sfBlendAlpha: sfBlendMode;
}
extern "C" {
    pub static sfBlendAdd: sfBlendMode;
}
extern "C" {
    pub static sfBlendMultiply: sfBlendMode;
}
extern "C" {
    pub static sfBlendNone: sfBlendMode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct sfColor {
    pub r: sfUint8,
    pub g: sfUint8,
    pub b: sfUint8,
    pub a: sfUint8,
}
#[test]
fn bindgen_test_layout_sfColor() {
    assert_eq!(
        ::std::mem::size_of::<sfColor>(),
        4usize,
        concat!("Size of: ", stringify!(sfColor))
    );
    assert_eq!(
        ::std::mem::align_of::<sfColor>(),
        1usize,
        concat!("Alignment of ", stringify!(sfColor))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfColor>())).r as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sfColor),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfColor>())).g as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(sfColor),
            "::",
            stringify!(g)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfColor>())).b as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sfColor),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfColor>())).a as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(sfColor),
            "::",
            stringify!(a)
        )
    );
}
extern "C" {
    pub static mut sfBlack: sfColor;
}
extern "C" {
    pub static mut sfWhite: sfColor;
}
extern "C" {
    pub static mut sfRed: sfColor;
}
extern "C" {
    pub static mut sfGreen: sfColor;
}
extern "C" {
    pub static mut sfBlue: sfColor;
}
extern "C" {
    pub static mut sfYellow: sfColor;
}
extern "C" {
    pub static mut sfMagenta: sfColor;
}
extern "C" {
    pub static mut sfCyan: sfColor;
}
extern "C" {
    pub static mut sfTransparent: sfColor;
}
extern "C" {
    pub fn sfColor_fromRGB(red: sfUint8, green: sfUint8, blue: sfUint8) -> sfColor;
}
extern "C" {
    pub fn sfColor_fromRGBA(red: sfUint8, green: sfUint8, blue: sfUint8, alpha: sfUint8)
        -> sfColor;
}
extern "C" {
    pub fn sfColor_fromInteger(color: sfUint32) -> sfColor;
}
extern "C" {
    pub fn sfColor_toInteger(color: sfColor) -> sfUint32;
}
extern "C" {
    pub fn sfColor_add(color1: sfColor, color2: sfColor) -> sfColor;
}
extern "C" {
    pub fn sfColor_subtract(color1: sfColor, color2: sfColor) -> sfColor;
}
extern "C" {
    pub fn sfColor_modulate(color1: sfColor, color2: sfColor) -> sfColor;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, PartialEq)]
pub struct sfFloatRect {
    pub left: f32,
    pub top: f32,
    pub width: f32,
    pub height: f32,
}
#[test]
fn bindgen_test_layout_sfFloatRect() {
    assert_eq!(
        ::std::mem::size_of::<sfFloatRect>(),
        16usize,
        concat!("Size of: ", stringify!(sfFloatRect))
    );
    assert_eq!(
        ::std::mem::align_of::<sfFloatRect>(),
        4usize,
        concat!("Alignment of ", stringify!(sfFloatRect))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfFloatRect>())).left as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sfFloatRect),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfFloatRect>())).top as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sfFloatRect),
            "::",
            stringify!(top)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfFloatRect>())).width as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sfFloatRect),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfFloatRect>())).height as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sfFloatRect),
            "::",
            stringify!(height)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct sfIntRect {
    pub left: ::std::os::raw::c_int,
    pub top: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sfIntRect() {
    assert_eq!(
        ::std::mem::size_of::<sfIntRect>(),
        16usize,
        concat!("Size of: ", stringify!(sfIntRect))
    );
    assert_eq!(
        ::std::mem::align_of::<sfIntRect>(),
        4usize,
        concat!("Alignment of ", stringify!(sfIntRect))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfIntRect>())).left as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sfIntRect),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfIntRect>())).top as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sfIntRect),
            "::",
            stringify!(top)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfIntRect>())).width as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sfIntRect),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfIntRect>())).height as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sfIntRect),
            "::",
            stringify!(height)
        )
    );
}
extern "C" {
    pub fn sfFloatRect_contains(rect: *const sfFloatRect, x: f32, y: f32) -> sfBool;
}
extern "C" {
    pub fn sfIntRect_contains(
        rect: *const sfIntRect,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> sfBool;
}
extern "C" {
    pub fn sfFloatRect_intersects(
        rect1: *const sfFloatRect,
        rect2: *const sfFloatRect,
        intersection: *mut sfFloatRect,
    ) -> sfBool;
}
extern "C" {
    pub fn sfIntRect_intersects(
        rect1: *const sfIntRect,
        rect2: *const sfIntRect,
        intersection: *mut sfIntRect,
    ) -> sfBool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sfCircleShape {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sfConvexShape {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sfFont {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sfImage {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sfShader {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sfRectangleShape {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sfRenderTexture {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sfRenderWindow {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sfShape {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sfSprite {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sfText {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sfTexture {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sfTransformable {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sfVertexArray {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sfVertexBuffer {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sfView {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, PartialEq)]
pub struct sfTransform {
    pub matrix: [f32; 9usize],
}
#[test]
fn bindgen_test_layout_sfTransform() {
    assert_eq!(
        ::std::mem::size_of::<sfTransform>(),
        36usize,
        concat!("Size of: ", stringify!(sfTransform))
    );
    assert_eq!(
        ::std::mem::align_of::<sfTransform>(),
        4usize,
        concat!("Alignment of ", stringify!(sfTransform))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfTransform>())).matrix as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sfTransform),
            "::",
            stringify!(matrix)
        )
    );
}
extern "C" {
    pub static sfTransform_Identity: sfTransform;
}
extern "C" {
    pub fn sfTransform_fromMatrix(
        a00: f32,
        a01: f32,
        a02: f32,
        a10: f32,
        a11: f32,
        a12: f32,
        a20: f32,
        a21: f32,
        a22: f32,
    ) -> sfTransform;
}
extern "C" {
    pub fn sfTransform_getMatrix(transform: *const sfTransform, matrix: *mut f32);
}
extern "C" {
    pub fn sfTransform_getInverse(transform: *const sfTransform) -> sfTransform;
}
extern "C" {
    pub fn sfTransform_transformPoint(
        transform: *const sfTransform,
        point: sfVector2f,
    ) -> sfVector2f;
}
extern "C" {
    pub fn sfTransform_transformRect(
        transform: *const sfTransform,
        rectangle: sfFloatRect,
    ) -> sfFloatRect;
}
extern "C" {
    pub fn sfTransform_combine(transform: *mut sfTransform, other: *const sfTransform);
}
extern "C" {
    pub fn sfTransform_translate(transform: *mut sfTransform, x: f32, y: f32);
}
extern "C" {
    pub fn sfTransform_rotate(transform: *mut sfTransform, angle: f32);
}
extern "C" {
    pub fn sfTransform_rotateWithCenter(
        transform: *mut sfTransform,
        angle: f32,
        centerX: f32,
        centerY: f32,
    );
}
extern "C" {
    pub fn sfTransform_scale(transform: *mut sfTransform, scaleX: f32, scaleY: f32);
}
extern "C" {
    pub fn sfTransform_scaleWithCenter(
        transform: *mut sfTransform,
        scaleX: f32,
        scaleY: f32,
        centerX: f32,
        centerY: f32,
    );
}
extern "C" {
    pub fn sfTransform_equal(left: *mut sfTransform, right: *mut sfTransform) -> sfBool;
}
extern "C" {
    pub fn sfCircleShape_create() -> *mut sfCircleShape;
}
extern "C" {
    pub fn sfCircleShape_copy(shape: *const sfCircleShape) -> *mut sfCircleShape;
}
extern "C" {
    pub fn sfCircleShape_destroy(shape: *mut sfCircleShape);
}
extern "C" {
    pub fn sfCircleShape_setPosition(shape: *mut sfCircleShape, position: sfVector2f);
}
extern "C" {
    pub fn sfCircleShape_setRotation(shape: *mut sfCircleShape, angle: f32);
}
extern "C" {
    pub fn sfCircleShape_setScale(shape: *mut sfCircleShape, scale: sfVector2f);
}
extern "C" {
    pub fn sfCircleShape_setOrigin(shape: *mut sfCircleShape, origin: sfVector2f);
}
extern "C" {
    pub fn sfCircleShape_getPosition(shape: *const sfCircleShape) -> sfVector2f;
}
extern "C" {
    pub fn sfCircleShape_getRotation(shape: *const sfCircleShape) -> f32;
}
extern "C" {
    pub fn sfCircleShape_getScale(shape: *const sfCircleShape) -> sfVector2f;
}
extern "C" {
    pub fn sfCircleShape_getOrigin(shape: *const sfCircleShape) -> sfVector2f;
}
extern "C" {
    pub fn sfCircleShape_move(shape: *mut sfCircleShape, offset: sfVector2f);
}
extern "C" {
    pub fn sfCircleShape_rotate(shape: *mut sfCircleShape, angle: f32);
}
extern "C" {
    pub fn sfCircleShape_scale(shape: *mut sfCircleShape, factors: sfVector2f);
}
extern "C" {
    pub fn sfCircleShape_getTransform(shape: *const sfCircleShape) -> sfTransform;
}
extern "C" {
    pub fn sfCircleShape_getInverseTransform(shape: *const sfCircleShape) -> sfTransform;
}
extern "C" {
    pub fn sfCircleShape_setTexture(
        shape: *mut sfCircleShape,
        texture: *const sfTexture,
        resetRect: sfBool,
    );
}
extern "C" {
    pub fn sfCircleShape_setTextureRect(shape: *mut sfCircleShape, rect: sfIntRect);
}
extern "C" {
    pub fn sfCircleShape_setFillColor(shape: *mut sfCircleShape, color: sfColor);
}
extern "C" {
    pub fn sfCircleShape_setOutlineColor(shape: *mut sfCircleShape, color: sfColor);
}
extern "C" {
    pub fn sfCircleShape_setOutlineThickness(shape: *mut sfCircleShape, thickness: f32);
}
extern "C" {
    pub fn sfCircleShape_getTexture(shape: *const sfCircleShape) -> *const sfTexture;
}
extern "C" {
    pub fn sfCircleShape_getTextureRect(shape: *const sfCircleShape) -> sfIntRect;
}
extern "C" {
    pub fn sfCircleShape_getFillColor(shape: *const sfCircleShape) -> sfColor;
}
extern "C" {
    pub fn sfCircleShape_getOutlineColor(shape: *const sfCircleShape) -> sfColor;
}
extern "C" {
    pub fn sfCircleShape_getOutlineThickness(shape: *const sfCircleShape) -> f32;
}
extern "C" {
    pub fn sfCircleShape_getPointCount(shape: *const sfCircleShape) -> usize;
}
extern "C" {
    pub fn sfCircleShape_getPoint(shape: *const sfCircleShape, index: usize) -> sfVector2f;
}
extern "C" {
    pub fn sfCircleShape_setRadius(shape: *mut sfCircleShape, radius: f32);
}
extern "C" {
    pub fn sfCircleShape_getRadius(shape: *const sfCircleShape) -> f32;
}
extern "C" {
    pub fn sfCircleShape_setPointCount(shape: *mut sfCircleShape, count: usize);
}
extern "C" {
    pub fn sfCircleShape_getLocalBounds(shape: *const sfCircleShape) -> sfFloatRect;
}
extern "C" {
    pub fn sfCircleShape_getGlobalBounds(shape: *const sfCircleShape) -> sfFloatRect;
}
extern "C" {
    pub fn sfConvexShape_create() -> *mut sfConvexShape;
}
extern "C" {
    pub fn sfConvexShape_copy(shape: *const sfConvexShape) -> *mut sfConvexShape;
}
extern "C" {
    pub fn sfConvexShape_destroy(shape: *mut sfConvexShape);
}
extern "C" {
    pub fn sfConvexShape_setPosition(shape: *mut sfConvexShape, position: sfVector2f);
}
extern "C" {
    pub fn sfConvexShape_setRotation(shape: *mut sfConvexShape, angle: f32);
}
extern "C" {
    pub fn sfConvexShape_setScale(shape: *mut sfConvexShape, scale: sfVector2f);
}
extern "C" {
    pub fn sfConvexShape_setOrigin(shape: *mut sfConvexShape, origin: sfVector2f);
}
extern "C" {
    pub fn sfConvexShape_getPosition(shape: *const sfConvexShape) -> sfVector2f;
}
extern "C" {
    pub fn sfConvexShape_getRotation(shape: *const sfConvexShape) -> f32;
}
extern "C" {
    pub fn sfConvexShape_getScale(shape: *const sfConvexShape) -> sfVector2f;
}
extern "C" {
    pub fn sfConvexShape_getOrigin(shape: *const sfConvexShape) -> sfVector2f;
}
extern "C" {
    pub fn sfConvexShape_move(shape: *mut sfConvexShape, offset: sfVector2f);
}
extern "C" {
    pub fn sfConvexShape_rotate(shape: *mut sfConvexShape, angle: f32);
}
extern "C" {
    pub fn sfConvexShape_scale(shape: *mut sfConvexShape, factors: sfVector2f);
}
extern "C" {
    pub fn sfConvexShape_getTransform(shape: *const sfConvexShape) -> sfTransform;
}
extern "C" {
    pub fn sfConvexShape_getInverseTransform(shape: *const sfConvexShape) -> sfTransform;
}
extern "C" {
    pub fn sfConvexShape_setTexture(
        shape: *mut sfConvexShape,
        texture: *const sfTexture,
        resetRect: sfBool,
    );
}
extern "C" {
    pub fn sfConvexShape_setTextureRect(shape: *mut sfConvexShape, rect: sfIntRect);
}
extern "C" {
    pub fn sfConvexShape_setFillColor(shape: *mut sfConvexShape, color: sfColor);
}
extern "C" {
    pub fn sfConvexShape_setOutlineColor(shape: *mut sfConvexShape, color: sfColor);
}
extern "C" {
    pub fn sfConvexShape_setOutlineThickness(shape: *mut sfConvexShape, thickness: f32);
}
extern "C" {
    pub fn sfConvexShape_getTexture(shape: *const sfConvexShape) -> *const sfTexture;
}
extern "C" {
    pub fn sfConvexShape_getTextureRect(shape: *const sfConvexShape) -> sfIntRect;
}
extern "C" {
    pub fn sfConvexShape_getFillColor(shape: *const sfConvexShape) -> sfColor;
}
extern "C" {
    pub fn sfConvexShape_getOutlineColor(shape: *const sfConvexShape) -> sfColor;
}
extern "C" {
    pub fn sfConvexShape_getOutlineThickness(shape: *const sfConvexShape) -> f32;
}
extern "C" {
    pub fn sfConvexShape_getPointCount(shape: *const sfConvexShape) -> usize;
}
extern "C" {
    pub fn sfConvexShape_getPoint(shape: *const sfConvexShape, index: usize) -> sfVector2f;
}
extern "C" {
    pub fn sfConvexShape_setPointCount(shape: *mut sfConvexShape, count: usize);
}
extern "C" {
    pub fn sfConvexShape_setPoint(shape: *mut sfConvexShape, index: usize, point: sfVector2f);
}
extern "C" {
    pub fn sfConvexShape_getLocalBounds(shape: *const sfConvexShape) -> sfFloatRect;
}
extern "C" {
    pub fn sfConvexShape_getGlobalBounds(shape: *const sfConvexShape) -> sfFloatRect;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct sfFontInfo {
    pub family: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_sfFontInfo() {
    assert_eq!(
        ::std::mem::size_of::<sfFontInfo>(),
        8usize,
        concat!("Size of: ", stringify!(sfFontInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<sfFontInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(sfFontInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfFontInfo>())).family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sfFontInfo),
            "::",
            stringify!(family)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, PartialEq)]
pub struct sfGlyph {
    pub advance: f32,
    pub bounds: sfFloatRect,
    pub textureRect: sfIntRect,
}
#[test]
fn bindgen_test_layout_sfGlyph() {
    assert_eq!(
        ::std::mem::size_of::<sfGlyph>(),
        36usize,
        concat!("Size of: ", stringify!(sfGlyph))
    );
    assert_eq!(
        ::std::mem::align_of::<sfGlyph>(),
        4usize,
        concat!("Alignment of ", stringify!(sfGlyph))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfGlyph>())).advance as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sfGlyph),
            "::",
            stringify!(advance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfGlyph>())).bounds as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sfGlyph),
            "::",
            stringify!(bounds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfGlyph>())).textureRect as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sfGlyph),
            "::",
            stringify!(textureRect)
        )
    );
}
extern "C" {
    pub fn sfFont_createFromFile(filename: *const ::std::os::raw::c_char) -> *mut sfFont;
}
extern "C" {
    pub fn sfFont_createFromMemory(
        data: *const ::std::os::raw::c_void,
        sizeInBytes: usize,
    ) -> *mut sfFont;
}
extern "C" {
    pub fn sfFont_createFromStream(stream: *mut sfInputStream) -> *mut sfFont;
}
extern "C" {
    pub fn sfFont_copy(font: *const sfFont) -> *mut sfFont;
}
extern "C" {
    pub fn sfFont_destroy(font: *mut sfFont);
}
extern "C" {
    pub fn sfFont_getGlyph(
        font: *const sfFont,
        codePoint: sfUint32,
        characterSize: ::std::os::raw::c_uint,
        bold: sfBool,
        outlineThickness: f32,
    ) -> sfGlyph;
}
extern "C" {
    pub fn sfFont_getKerning(
        font: *const sfFont,
        first: sfUint32,
        second: sfUint32,
        characterSize: ::std::os::raw::c_uint,
    ) -> f32;
}
extern "C" {
    pub fn sfFont_getLineSpacing(font: *const sfFont, characterSize: ::std::os::raw::c_uint)
        -> f32;
}
extern "C" {
    pub fn sfFont_getUnderlinePosition(
        font: *const sfFont,
        characterSize: ::std::os::raw::c_uint,
    ) -> f32;
}
extern "C" {
    pub fn sfFont_getUnderlineThickness(
        font: *const sfFont,
        characterSize: ::std::os::raw::c_uint,
    ) -> f32;
}
extern "C" {
    pub fn sfFont_getTexture(
        font: *mut sfFont,
        characterSize: ::std::os::raw::c_uint,
    ) -> *const sfTexture;
}
extern "C" {
    pub fn sfFont_getInfo(font: *const sfFont) -> sfFontInfo;
}
extern "C" {
    pub fn sfImage_create(
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
    ) -> *mut sfImage;
}
extern "C" {
    pub fn sfImage_createFromColor(
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
        color: sfColor,
    ) -> *mut sfImage;
}
extern "C" {
    pub fn sfImage_createFromPixels(
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
        pixels: *const sfUint8,
    ) -> *mut sfImage;
}
extern "C" {
    pub fn sfImage_createFromFile(filename: *const ::std::os::raw::c_char) -> *mut sfImage;
}
extern "C" {
    pub fn sfImage_createFromMemory(
        data: *const ::std::os::raw::c_void,
        size: usize,
    ) -> *mut sfImage;
}
extern "C" {
    pub fn sfImage_createFromStream(stream: *mut sfInputStream) -> *mut sfImage;
}
extern "C" {
    pub fn sfImage_copy(image: *const sfImage) -> *mut sfImage;
}
extern "C" {
    pub fn sfImage_destroy(image: *mut sfImage);
}
extern "C" {
    pub fn sfImage_saveToFile(
        image: *const sfImage,
        filename: *const ::std::os::raw::c_char,
    ) -> sfBool;
}
extern "C" {
    pub fn sfImage_getSize(image: *const sfImage) -> sfVector2u;
}
extern "C" {
    pub fn sfImage_createMaskFromColor(image: *mut sfImage, color: sfColor, alpha: sfUint8);
}
extern "C" {
    pub fn sfImage_copyImage(
        image: *mut sfImage,
        source: *const sfImage,
        destX: ::std::os::raw::c_uint,
        destY: ::std::os::raw::c_uint,
        sourceRect: sfIntRect,
        applyAlpha: sfBool,
    );
}
extern "C" {
    pub fn sfImage_setPixel(
        image: *mut sfImage,
        x: ::std::os::raw::c_uint,
        y: ::std::os::raw::c_uint,
        color: sfColor,
    );
}
extern "C" {
    pub fn sfImage_getPixel(
        image: *const sfImage,
        x: ::std::os::raw::c_uint,
        y: ::std::os::raw::c_uint,
    ) -> sfColor;
}
extern "C" {
    pub fn sfImage_getPixelsPtr(image: *const sfImage) -> *const sfUint8;
}
extern "C" {
    pub fn sfImage_flipHorizontally(image: *mut sfImage);
}
extern "C" {
    pub fn sfImage_flipVertically(image: *mut sfImage);
}
pub const sfPrimitiveType_sfPoints: sfPrimitiveType = 0;
pub const sfPrimitiveType_sfLines: sfPrimitiveType = 1;
pub const sfPrimitiveType_sfLineStrip: sfPrimitiveType = 2;
pub const sfPrimitiveType_sfTriangles: sfPrimitiveType = 3;
pub const sfPrimitiveType_sfTriangleStrip: sfPrimitiveType = 4;
pub const sfPrimitiveType_sfTriangleFan: sfPrimitiveType = 5;
pub const sfPrimitiveType_sfQuads: sfPrimitiveType = 6;
pub const sfPrimitiveType_sfLinesStrip: sfPrimitiveType = 2;
pub const sfPrimitiveType_sfTrianglesStrip: sfPrimitiveType = 4;
pub const sfPrimitiveType_sfTrianglesFan: sfPrimitiveType = 5;
pub type sfPrimitiveType = ::std::os::raw::c_uint;
extern "C" {
    pub fn sfRectangleShape_create() -> *mut sfRectangleShape;
}
extern "C" {
    pub fn sfRectangleShape_copy(shape: *const sfRectangleShape) -> *mut sfRectangleShape;
}
extern "C" {
    pub fn sfRectangleShape_destroy(shape: *mut sfRectangleShape);
}
extern "C" {
    pub fn sfRectangleShape_setPosition(shape: *mut sfRectangleShape, position: sfVector2f);
}
extern "C" {
    pub fn sfRectangleShape_setRotation(shape: *mut sfRectangleShape, angle: f32);
}
extern "C" {
    pub fn sfRectangleShape_setScale(shape: *mut sfRectangleShape, scale: sfVector2f);
}
extern "C" {
    pub fn sfRectangleShape_setOrigin(shape: *mut sfRectangleShape, origin: sfVector2f);
}
extern "C" {
    pub fn sfRectangleShape_getPosition(shape: *const sfRectangleShape) -> sfVector2f;
}
extern "C" {
    pub fn sfRectangleShape_getRotation(shape: *const sfRectangleShape) -> f32;
}
extern "C" {
    pub fn sfRectangleShape_getScale(shape: *const sfRectangleShape) -> sfVector2f;
}
extern "C" {
    pub fn sfRectangleShape_getOrigin(shape: *const sfRectangleShape) -> sfVector2f;
}
extern "C" {
    pub fn sfRectangleShape_move(shape: *mut sfRectangleShape, offset: sfVector2f);
}
extern "C" {
    pub fn sfRectangleShape_rotate(shape: *mut sfRectangleShape, angle: f32);
}
extern "C" {
    pub fn sfRectangleShape_scale(shape: *mut sfRectangleShape, factors: sfVector2f);
}
extern "C" {
    pub fn sfRectangleShape_getTransform(shape: *const sfRectangleShape) -> sfTransform;
}
extern "C" {
    pub fn sfRectangleShape_getInverseTransform(shape: *const sfRectangleShape) -> sfTransform;
}
extern "C" {
    pub fn sfRectangleShape_setTexture(
        shape: *mut sfRectangleShape,
        texture: *const sfTexture,
        resetRect: sfBool,
    );
}
extern "C" {
    pub fn sfRectangleShape_setTextureRect(shape: *mut sfRectangleShape, rect: sfIntRect);
}
extern "C" {
    pub fn sfRectangleShape_setFillColor(shape: *mut sfRectangleShape, color: sfColor);
}
extern "C" {
    pub fn sfRectangleShape_setOutlineColor(shape: *mut sfRectangleShape, color: sfColor);
}
extern "C" {
    pub fn sfRectangleShape_setOutlineThickness(shape: *mut sfRectangleShape, thickness: f32);
}
extern "C" {
    pub fn sfRectangleShape_getTexture(shape: *const sfRectangleShape) -> *const sfTexture;
}
extern "C" {
    pub fn sfRectangleShape_getTextureRect(shape: *const sfRectangleShape) -> sfIntRect;
}
extern "C" {
    pub fn sfRectangleShape_getFillColor(shape: *const sfRectangleShape) -> sfColor;
}
extern "C" {
    pub fn sfRectangleShape_getOutlineColor(shape: *const sfRectangleShape) -> sfColor;
}
extern "C" {
    pub fn sfRectangleShape_getOutlineThickness(shape: *const sfRectangleShape) -> f32;
}
extern "C" {
    pub fn sfRectangleShape_getPointCount(shape: *const sfRectangleShape) -> usize;
}
extern "C" {
    pub fn sfRectangleShape_getPoint(shape: *const sfRectangleShape, index: usize) -> sfVector2f;
}
extern "C" {
    pub fn sfRectangleShape_setSize(shape: *mut sfRectangleShape, size: sfVector2f);
}
extern "C" {
    pub fn sfRectangleShape_getSize(shape: *const sfRectangleShape) -> sfVector2f;
}
extern "C" {
    pub fn sfRectangleShape_getLocalBounds(shape: *const sfRectangleShape) -> sfFloatRect;
}
extern "C" {
    pub fn sfRectangleShape_getGlobalBounds(shape: *const sfRectangleShape) -> sfFloatRect;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, PartialEq)]
pub struct sfRenderStates {
    pub blendMode: sfBlendMode,
    pub transform: sfTransform,
    pub texture: *const sfTexture,
    pub shader: *const sfShader,
}
#[test]
fn bindgen_test_layout_sfRenderStates() {
    assert_eq!(
        ::std::mem::size_of::<sfRenderStates>(),
        80usize,
        concat!("Size of: ", stringify!(sfRenderStates))
    );
    assert_eq!(
        ::std::mem::align_of::<sfRenderStates>(),
        8usize,
        concat!("Alignment of ", stringify!(sfRenderStates))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfRenderStates>())).blendMode as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sfRenderStates),
            "::",
            stringify!(blendMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfRenderStates>())).transform as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sfRenderStates),
            "::",
            stringify!(transform)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfRenderStates>())).texture as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sfRenderStates),
            "::",
            stringify!(texture)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfRenderStates>())).shader as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(sfRenderStates),
            "::",
            stringify!(shader)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, PartialEq)]
pub struct sfVertex {
    pub position: sfVector2f,
    pub color: sfColor,
    pub texCoords: sfVector2f,
}
#[test]
fn bindgen_test_layout_sfVertex() {
    assert_eq!(
        ::std::mem::size_of::<sfVertex>(),
        20usize,
        concat!("Size of: ", stringify!(sfVertex))
    );
    assert_eq!(
        ::std::mem::align_of::<sfVertex>(),
        4usize,
        concat!("Alignment of ", stringify!(sfVertex))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfVertex>())).position as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sfVertex),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfVertex>())).color as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sfVertex),
            "::",
            stringify!(color)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfVertex>())).texCoords as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sfVertex),
            "::",
            stringify!(texCoords)
        )
    );
}
extern "C" {
    pub fn sfRenderTexture_create(
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
        depthBuffer: sfBool,
    ) -> *mut sfRenderTexture;
}
extern "C" {
    pub fn sfRenderTexture_createWithSettings(
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
        settings: sfContextSettings,
    ) -> *mut sfRenderTexture;
}
extern "C" {
    pub fn sfRenderTexture_destroy(renderTexture: *mut sfRenderTexture);
}
extern "C" {
    pub fn sfRenderTexture_getSize(renderTexture: *const sfRenderTexture) -> sfVector2u;
}
extern "C" {
    pub fn sfRenderTexture_setActive(renderTexture: *mut sfRenderTexture, active: sfBool)
        -> sfBool;
}
extern "C" {
    pub fn sfRenderTexture_display(renderTexture: *mut sfRenderTexture);
}
extern "C" {
    pub fn sfRenderTexture_clear(renderTexture: *mut sfRenderTexture, color: sfColor);
}
extern "C" {
    pub fn sfRenderTexture_setView(renderTexture: *mut sfRenderTexture, view: *const sfView);
}
extern "C" {
    pub fn sfRenderTexture_getView(renderTexture: *const sfRenderTexture) -> *const sfView;
}
extern "C" {
    pub fn sfRenderTexture_getDefaultView(renderTexture: *const sfRenderTexture) -> *const sfView;
}
extern "C" {
    pub fn sfRenderTexture_getViewport(
        renderTexture: *const sfRenderTexture,
        view: *const sfView,
    ) -> sfIntRect;
}
extern "C" {
    pub fn sfRenderTexture_mapPixelToCoords(
        renderTexture: *const sfRenderTexture,
        point: sfVector2i,
        view: *const sfView,
    ) -> sfVector2f;
}
extern "C" {
    pub fn sfRenderTexture_mapCoordsToPixel(
        renderTexture: *const sfRenderTexture,
        point: sfVector2f,
        view: *const sfView,
    ) -> sfVector2i;
}
extern "C" {
    pub fn sfRenderTexture_drawSprite(
        renderTexture: *mut sfRenderTexture,
        object: *const sfSprite,
        states: *const sfRenderStates,
    );
}
extern "C" {
    pub fn sfRenderTexture_drawText(
        renderTexture: *mut sfRenderTexture,
        object: *const sfText,
        states: *const sfRenderStates,
    );
}
extern "C" {
    pub fn sfRenderTexture_drawShape(
        renderTexture: *mut sfRenderTexture,
        object: *const sfShape,
        states: *const sfRenderStates,
    );
}
extern "C" {
    pub fn sfRenderTexture_drawCircleShape(
        renderTexture: *mut sfRenderTexture,
        object: *const sfCircleShape,
        states: *const sfRenderStates,
    );
}
extern "C" {
    pub fn sfRenderTexture_drawConvexShape(
        renderTexture: *mut sfRenderTexture,
        object: *const sfConvexShape,
        states: *const sfRenderStates,
    );
}
extern "C" {
    pub fn sfRenderTexture_drawRectangleShape(
        renderTexture: *mut sfRenderTexture,
        object: *const sfRectangleShape,
        states: *const sfRenderStates,
    );
}
extern "C" {
    pub fn sfRenderTexture_drawVertexArray(
        renderTexture: *mut sfRenderTexture,
        object: *const sfVertexArray,
        states: *const sfRenderStates,
    );
}
extern "C" {
    pub fn sfRenderTexture_drawVertexBuffer(
        renderTexture: *mut sfRenderTexture,
        object: *const sfVertexBuffer,
        states: *const sfRenderStates,
    );
}
extern "C" {
    pub fn sfRenderTexture_drawPrimitives(
        renderTexture: *mut sfRenderTexture,
        vertices: *const sfVertex,
        vertexCount: usize,
        type_: sfPrimitiveType,
        states: *const sfRenderStates,
    );
}
extern "C" {
    pub fn sfRenderTexture_pushGLStates(renderTexture: *mut sfRenderTexture);
}
extern "C" {
    pub fn sfRenderTexture_popGLStates(renderTexture: *mut sfRenderTexture);
}
extern "C" {
    pub fn sfRenderTexture_resetGLStates(renderTexture: *mut sfRenderTexture);
}
extern "C" {
    pub fn sfRenderTexture_getTexture(renderTexture: *const sfRenderTexture) -> *const sfTexture;
}
extern "C" {
    pub fn sfRenderTexture_getMaximumAntialiasingLevel() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sfRenderTexture_setSmooth(renderTexture: *mut sfRenderTexture, smooth: sfBool);
}
extern "C" {
    pub fn sfRenderTexture_isSmooth(renderTexture: *const sfRenderTexture) -> sfBool;
}
extern "C" {
    pub fn sfRenderTexture_setRepeated(renderTexture: *mut sfRenderTexture, repeated: sfBool);
}
extern "C" {
    pub fn sfRenderTexture_isRepeated(renderTexture: *const sfRenderTexture) -> sfBool;
}
extern "C" {
    pub fn sfRenderTexture_generateMipmap(renderTexture: *mut sfRenderTexture) -> sfBool;
}
extern "C" {
    pub fn sfRenderWindow_create(
        mode: sfVideoMode,
        title: *const ::std::os::raw::c_char,
        style: sfUint32,
        settings: *const sfContextSettings,
    ) -> *mut sfRenderWindow;
}
extern "C" {
    pub fn sfRenderWindow_createUnicode(
        mode: sfVideoMode,
        title: *const sfUint32,
        style: sfUint32,
        settings: *const sfContextSettings,
    ) -> *mut sfRenderWindow;
}
extern "C" {
    pub fn sfRenderWindow_createFromHandle(
        handle: sfWindowHandle,
        settings: *const sfContextSettings,
    ) -> *mut sfRenderWindow;
}
extern "C" {
    pub fn sfRenderWindow_destroy(renderWindow: *mut sfRenderWindow);
}
extern "C" {
    pub fn sfRenderWindow_close(renderWindow: *mut sfRenderWindow);
}
extern "C" {
    pub fn sfRenderWindow_isOpen(renderWindow: *const sfRenderWindow) -> sfBool;
}
extern "C" {
    pub fn sfRenderWindow_getSettings(renderWindow: *const sfRenderWindow) -> sfContextSettings;
}
extern "C" {
    pub fn sfRenderWindow_pollEvent(
        renderWindow: *mut sfRenderWindow,
        event: *mut sfEvent,
    ) -> sfBool;
}
extern "C" {
    pub fn sfRenderWindow_waitEvent(
        renderWindow: *mut sfRenderWindow,
        event: *mut sfEvent,
    ) -> sfBool;
}
extern "C" {
    pub fn sfRenderWindow_getPosition(renderWindow: *const sfRenderWindow) -> sfVector2i;
}
extern "C" {
    pub fn sfRenderWindow_setPosition(renderWindow: *mut sfRenderWindow, position: sfVector2i);
}
extern "C" {
    pub fn sfRenderWindow_getSize(renderWindow: *const sfRenderWindow) -> sfVector2u;
}
extern "C" {
    pub fn sfRenderWindow_setSize(renderWindow: *mut sfRenderWindow, size: sfVector2u);
}
extern "C" {
    pub fn sfRenderWindow_setTitle(
        renderWindow: *mut sfRenderWindow,
        title: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn sfRenderWindow_setUnicodeTitle(
        renderWindow: *mut sfRenderWindow,
        title: *const sfUint32,
    );
}
extern "C" {
    pub fn sfRenderWindow_setIcon(
        renderWindow: *mut sfRenderWindow,
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
        pixels: *const sfUint8,
    );
}
extern "C" {
    pub fn sfRenderWindow_setVisible(renderWindow: *mut sfRenderWindow, visible: sfBool);
}
extern "C" {
    pub fn sfRenderWindow_setVerticalSyncEnabled(
        renderWindow: *mut sfRenderWindow,
        enabled: sfBool,
    );
}
extern "C" {
    pub fn sfRenderWindow_setMouseCursorVisible(renderWindow: *mut sfRenderWindow, show: sfBool);
}
extern "C" {
    pub fn sfRenderWindow_setMouseCursorGrabbed(renderWindow: *mut sfRenderWindow, grabbed: sfBool);
}
extern "C" {
    pub fn sfRenderWindow_setMouseCursor(window: *mut sfRenderWindow, cursor: *const sfCursor);
}
extern "C" {
    pub fn sfRenderWindow_setKeyRepeatEnabled(renderWindow: *mut sfRenderWindow, enabled: sfBool);
}
extern "C" {
    pub fn sfRenderWindow_setFramerateLimit(
        renderWindow: *mut sfRenderWindow,
        limit: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn sfRenderWindow_setJoystickThreshold(renderWindow: *mut sfRenderWindow, threshold: f32);
}
extern "C" {
    pub fn sfRenderWindow_setActive(renderWindow: *mut sfRenderWindow, active: sfBool) -> sfBool;
}
extern "C" {
    pub fn sfRenderWindow_requestFocus(renderWindow: *mut sfRenderWindow);
}
extern "C" {
    pub fn sfRenderWindow_hasFocus(renderWindow: *const sfRenderWindow) -> sfBool;
}
extern "C" {
    pub fn sfRenderWindow_display(renderWindow: *mut sfRenderWindow);
}
extern "C" {
    pub fn sfRenderWindow_getSystemHandle(renderWindow: *const sfRenderWindow) -> sfWindowHandle;
}
extern "C" {
    pub fn sfRenderWindow_clear(renderWindow: *mut sfRenderWindow, color: sfColor);
}
extern "C" {
    pub fn sfRenderWindow_setView(renderWindow: *mut sfRenderWindow, view: *const sfView);
}
extern "C" {
    pub fn sfRenderWindow_getView(renderWindow: *const sfRenderWindow) -> *const sfView;
}
extern "C" {
    pub fn sfRenderWindow_getDefaultView(renderWindow: *const sfRenderWindow) -> *const sfView;
}
extern "C" {
    pub fn sfRenderWindow_getViewport(
        renderWindow: *const sfRenderWindow,
        view: *const sfView,
    ) -> sfIntRect;
}
extern "C" {
    pub fn sfRenderWindow_mapPixelToCoords(
        renderWindow: *const sfRenderWindow,
        point: sfVector2i,
        view: *const sfView,
    ) -> sfVector2f;
}
extern "C" {
    pub fn sfRenderWindow_mapCoordsToPixel(
        renderWindow: *const sfRenderWindow,
        point: sfVector2f,
        view: *const sfView,
    ) -> sfVector2i;
}
extern "C" {
    pub fn sfRenderWindow_drawSprite(
        renderWindow: *mut sfRenderWindow,
        object: *const sfSprite,
        states: *const sfRenderStates,
    );
}
extern "C" {
    pub fn sfRenderWindow_drawText(
        renderWindow: *mut sfRenderWindow,
        object: *const sfText,
        states: *const sfRenderStates,
    );
}
extern "C" {
    pub fn sfRenderWindow_drawShape(
        renderWindow: *mut sfRenderWindow,
        object: *const sfShape,
        states: *const sfRenderStates,
    );
}
extern "C" {
    pub fn sfRenderWindow_drawCircleShape(
        renderWindow: *mut sfRenderWindow,
        object: *const sfCircleShape,
        states: *const sfRenderStates,
    );
}
extern "C" {
    pub fn sfRenderWindow_drawConvexShape(
        renderWindow: *mut sfRenderWindow,
        object: *const sfConvexShape,
        states: *const sfRenderStates,
    );
}
extern "C" {
    pub fn sfRenderWindow_drawRectangleShape(
        renderWindow: *mut sfRenderWindow,
        object: *const sfRectangleShape,
        states: *const sfRenderStates,
    );
}
extern "C" {
    pub fn sfRenderWindow_drawVertexArray(
        renderWindow: *mut sfRenderWindow,
        object: *const sfVertexArray,
        states: *const sfRenderStates,
    );
}
extern "C" {
    pub fn sfRenderWindow_drawVertexBuffer(
        renderWindow: *mut sfRenderWindow,
        object: *const sfVertexBuffer,
        states: *const sfRenderStates,
    );
}
extern "C" {
    pub fn sfRenderWindow_drawPrimitives(
        renderWindow: *mut sfRenderWindow,
        vertices: *const sfVertex,
        vertexCount: usize,
        type_: sfPrimitiveType,
        states: *const sfRenderStates,
    );
}
extern "C" {
    pub fn sfRenderWindow_pushGLStates(renderWindow: *mut sfRenderWindow);
}
extern "C" {
    pub fn sfRenderWindow_popGLStates(renderWindow: *mut sfRenderWindow);
}
extern "C" {
    pub fn sfRenderWindow_resetGLStates(renderWindow: *mut sfRenderWindow);
}
extern "C" {
    pub fn sfRenderWindow_capture(renderWindow: *const sfRenderWindow) -> *mut sfImage;
}
extern "C" {
    pub fn sfMouse_getPositionRenderWindow(relativeTo: *const sfRenderWindow) -> sfVector2i;
}
extern "C" {
    pub fn sfMouse_setPositionRenderWindow(position: sfVector2i, relativeTo: *const sfRenderWindow);
}
extern "C" {
    pub fn sfTouch_getPositionRenderWindow(
        finger: ::std::os::raw::c_uint,
        relativeTo: *const sfRenderWindow,
    ) -> sfVector2i;
}
pub type sfGlslVec2 = sfVector2f;
pub type sfGlslIvec2 = sfVector2i;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct sfGlslBvec2 {
    pub x: sfBool,
    pub y: sfBool,
}
#[test]
fn bindgen_test_layout_sfGlslBvec2() {
    assert_eq!(
        ::std::mem::size_of::<sfGlslBvec2>(),
        8usize,
        concat!("Size of: ", stringify!(sfGlslBvec2))
    );
    assert_eq!(
        ::std::mem::align_of::<sfGlslBvec2>(),
        4usize,
        concat!("Alignment of ", stringify!(sfGlslBvec2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfGlslBvec2>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sfGlslBvec2),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfGlslBvec2>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sfGlslBvec2),
            "::",
            stringify!(y)
        )
    );
}
pub type sfGlslVec3 = sfVector3f;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct sfGlslIvec3 {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub z: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sfGlslIvec3() {
    assert_eq!(
        ::std::mem::size_of::<sfGlslIvec3>(),
        12usize,
        concat!("Size of: ", stringify!(sfGlslIvec3))
    );
    assert_eq!(
        ::std::mem::align_of::<sfGlslIvec3>(),
        4usize,
        concat!("Alignment of ", stringify!(sfGlslIvec3))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfGlslIvec3>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sfGlslIvec3),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfGlslIvec3>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sfGlslIvec3),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfGlslIvec3>())).z as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sfGlslIvec3),
            "::",
            stringify!(z)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct sfGlslBvec3 {
    pub x: sfBool,
    pub y: sfBool,
    pub z: sfBool,
}
#[test]
fn bindgen_test_layout_sfGlslBvec3() {
    assert_eq!(
        ::std::mem::size_of::<sfGlslBvec3>(),
        12usize,
        concat!("Size of: ", stringify!(sfGlslBvec3))
    );
    assert_eq!(
        ::std::mem::align_of::<sfGlslBvec3>(),
        4usize,
        concat!("Alignment of ", stringify!(sfGlslBvec3))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfGlslBvec3>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sfGlslBvec3),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfGlslBvec3>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sfGlslBvec3),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfGlslBvec3>())).z as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sfGlslBvec3),
            "::",
            stringify!(z)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, PartialEq)]
pub struct sfGlslVec4 {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub w: f32,
}
#[test]
fn bindgen_test_layout_sfGlslVec4() {
    assert_eq!(
        ::std::mem::size_of::<sfGlslVec4>(),
        16usize,
        concat!("Size of: ", stringify!(sfGlslVec4))
    );
    assert_eq!(
        ::std::mem::align_of::<sfGlslVec4>(),
        4usize,
        concat!("Alignment of ", stringify!(sfGlslVec4))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfGlslVec4>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sfGlslVec4),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfGlslVec4>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sfGlslVec4),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfGlslVec4>())).z as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sfGlslVec4),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfGlslVec4>())).w as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sfGlslVec4),
            "::",
            stringify!(w)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct sfGlslIvec4 {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub z: ::std::os::raw::c_int,
    pub w: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sfGlslIvec4() {
    assert_eq!(
        ::std::mem::size_of::<sfGlslIvec4>(),
        16usize,
        concat!("Size of: ", stringify!(sfGlslIvec4))
    );
    assert_eq!(
        ::std::mem::align_of::<sfGlslIvec4>(),
        4usize,
        concat!("Alignment of ", stringify!(sfGlslIvec4))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfGlslIvec4>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sfGlslIvec4),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfGlslIvec4>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sfGlslIvec4),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfGlslIvec4>())).z as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sfGlslIvec4),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfGlslIvec4>())).w as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sfGlslIvec4),
            "::",
            stringify!(w)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct sfGlslBvec4 {
    pub x: sfBool,
    pub y: sfBool,
    pub z: sfBool,
    pub w: sfBool,
}
#[test]
fn bindgen_test_layout_sfGlslBvec4() {
    assert_eq!(
        ::std::mem::size_of::<sfGlslBvec4>(),
        16usize,
        concat!("Size of: ", stringify!(sfGlslBvec4))
    );
    assert_eq!(
        ::std::mem::align_of::<sfGlslBvec4>(),
        4usize,
        concat!("Alignment of ", stringify!(sfGlslBvec4))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfGlslBvec4>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sfGlslBvec4),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfGlslBvec4>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sfGlslBvec4),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfGlslBvec4>())).z as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sfGlslBvec4),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfGlslBvec4>())).w as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sfGlslBvec4),
            "::",
            stringify!(w)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, PartialEq)]
pub struct sfGlslMat3 {
    pub array: [f32; 9usize],
}
#[test]
fn bindgen_test_layout_sfGlslMat3() {
    assert_eq!(
        ::std::mem::size_of::<sfGlslMat3>(),
        36usize,
        concat!("Size of: ", stringify!(sfGlslMat3))
    );
    assert_eq!(
        ::std::mem::align_of::<sfGlslMat3>(),
        4usize,
        concat!("Alignment of ", stringify!(sfGlslMat3))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfGlslMat3>())).array as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sfGlslMat3),
            "::",
            stringify!(array)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, PartialEq)]
pub struct sfGlslMat4 {
    pub array: [f32; 16usize],
}
#[test]
fn bindgen_test_layout_sfGlslMat4() {
    assert_eq!(
        ::std::mem::size_of::<sfGlslMat4>(),
        64usize,
        concat!("Size of: ", stringify!(sfGlslMat4))
    );
    assert_eq!(
        ::std::mem::align_of::<sfGlslMat4>(),
        4usize,
        concat!("Alignment of ", stringify!(sfGlslMat4))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfGlslMat4>())).array as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sfGlslMat4),
            "::",
            stringify!(array)
        )
    );
}
extern "C" {
    pub fn sfShader_createFromFile(
        vertexShaderFilename: *const ::std::os::raw::c_char,
        geometryShaderFilename: *const ::std::os::raw::c_char,
        fragmentShaderFilename: *const ::std::os::raw::c_char,
    ) -> *mut sfShader;
}
extern "C" {
    pub fn sfShader_createFromMemory(
        vertexShader: *const ::std::os::raw::c_char,
        geometryShader: *const ::std::os::raw::c_char,
        fragmentShader: *const ::std::os::raw::c_char,
    ) -> *mut sfShader;
}
extern "C" {
    pub fn sfShader_createFromStream(
        vertexShaderStream: *mut sfInputStream,
        geometryShaderStream: *mut sfInputStream,
        fragmentShaderStream: *mut sfInputStream,
    ) -> *mut sfShader;
}
extern "C" {
    pub fn sfShader_destroy(shader: *mut sfShader);
}
extern "C" {
    pub fn sfShader_setFloatUniform(
        shader: *mut sfShader,
        name: *const ::std::os::raw::c_char,
        x: f32,
    );
}
extern "C" {
    pub fn sfShader_setVec2Uniform(
        shader: *mut sfShader,
        name: *const ::std::os::raw::c_char,
        vector: sfGlslVec2,
    );
}
extern "C" {
    pub fn sfShader_setVec3Uniform(
        shader: *mut sfShader,
        name: *const ::std::os::raw::c_char,
        vector: sfGlslVec3,
    );
}
extern "C" {
    pub fn sfShader_setVec4Uniform(
        shader: *mut sfShader,
        name: *const ::std::os::raw::c_char,
        vector: sfGlslVec4,
    );
}
extern "C" {
    pub fn sfShader_setColorUniform(
        shader: *mut sfShader,
        name: *const ::std::os::raw::c_char,
        color: sfColor,
    );
}
extern "C" {
    pub fn sfShader_setIntUniform(
        shader: *mut sfShader,
        name: *const ::std::os::raw::c_char,
        x: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn sfShader_setIvec2Uniform(
        shader: *mut sfShader,
        name: *const ::std::os::raw::c_char,
        vector: sfGlslIvec2,
    );
}
extern "C" {
    pub fn sfShader_setIvec3Uniform(
        shader: *mut sfShader,
        name: *const ::std::os::raw::c_char,
        vector: sfGlslIvec3,
    );
}
extern "C" {
    pub fn sfShader_setIvec4Uniform(
        shader: *mut sfShader,
        name: *const ::std::os::raw::c_char,
        vector: sfGlslIvec4,
    );
}
extern "C" {
    pub fn sfShader_setIntColorUniform(
        shader: *mut sfShader,
        name: *const ::std::os::raw::c_char,
        color: sfColor,
    );
}
extern "C" {
    pub fn sfShader_setBoolUniform(
        shader: *mut sfShader,
        name: *const ::std::os::raw::c_char,
        x: sfBool,
    );
}
extern "C" {
    pub fn sfShader_setBvec2Uniform(
        shader: *mut sfShader,
        name: *const ::std::os::raw::c_char,
        vector: sfGlslBvec2,
    );
}
extern "C" {
    pub fn sfShader_setBvec3Uniform(
        shader: *mut sfShader,
        name: *const ::std::os::raw::c_char,
        vector: sfGlslBvec3,
    );
}
extern "C" {
    pub fn sfShader_setBvec4Uniform(
        shader: *mut sfShader,
        name: *const ::std::os::raw::c_char,
        vector: sfGlslBvec4,
    );
}
extern "C" {
    pub fn sfShader_setMat3Uniform(
        shader: *mut sfShader,
        name: *const ::std::os::raw::c_char,
        matrix: *const sfGlslMat3,
    );
}
extern "C" {
    pub fn sfShader_setMat4Uniform(
        shader: *mut sfShader,
        name: *const ::std::os::raw::c_char,
        matrix: *const sfGlslMat4,
    );
}
extern "C" {
    pub fn sfShader_setTextureUniform(
        shader: *mut sfShader,
        name: *const ::std::os::raw::c_char,
        texture: *const sfTexture,
    );
}
extern "C" {
    pub fn sfShader_setCurrentTextureUniform(
        shader: *mut sfShader,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn sfShader_setFloatUniformArray(
        shader: *mut sfShader,
        name: *const ::std::os::raw::c_char,
        scalarArray: *const f32,
        length: usize,
    );
}
extern "C" {
    pub fn sfShader_setVec2UniformArray(
        shader: *mut sfShader,
        name: *const ::std::os::raw::c_char,
        vectorArray: *const sfGlslVec2,
        length: usize,
    );
}
extern "C" {
    pub fn sfShader_setVec3UniformArray(
        shader: *mut sfShader,
        name: *const ::std::os::raw::c_char,
        vectorArray: *const sfGlslVec3,
        length: usize,
    );
}
extern "C" {
    pub fn sfShader_setVec4UniformArray(
        shader: *mut sfShader,
        name: *const ::std::os::raw::c_char,
        vectorArray: *const sfGlslVec4,
        length: usize,
    );
}
extern "C" {
    pub fn sfShader_setMat3UniformArray(
        shader: *mut sfShader,
        name: *const ::std::os::raw::c_char,
        matrixArray: *const sfGlslMat3,
        length: usize,
    );
}
extern "C" {
    pub fn sfShader_setMat4UniformArray(
        shader: *mut sfShader,
        name: *const ::std::os::raw::c_char,
        matrixArray: *const sfGlslMat4,
        length: usize,
    );
}
extern "C" {
    pub fn sfShader_setFloatParameter(
        shader: *mut sfShader,
        name: *const ::std::os::raw::c_char,
        x: f32,
    );
}
extern "C" {
    pub fn sfShader_setFloat2Parameter(
        shader: *mut sfShader,
        name: *const ::std::os::raw::c_char,
        x: f32,
        y: f32,
    );
}
extern "C" {
    pub fn sfShader_setFloat3Parameter(
        shader: *mut sfShader,
        name: *const ::std::os::raw::c_char,
        x: f32,
        y: f32,
        z: f32,
    );
}
extern "C" {
    pub fn sfShader_setFloat4Parameter(
        shader: *mut sfShader,
        name: *const ::std::os::raw::c_char,
        x: f32,
        y: f32,
        z: f32,
        w: f32,
    );
}
extern "C" {
    pub fn sfShader_setVector2Parameter(
        shader: *mut sfShader,
        name: *const ::std::os::raw::c_char,
        vector: sfVector2f,
    );
}
extern "C" {
    pub fn sfShader_setVector3Parameter(
        shader: *mut sfShader,
        name: *const ::std::os::raw::c_char,
        vector: sfVector3f,
    );
}
extern "C" {
    pub fn sfShader_setColorParameter(
        shader: *mut sfShader,
        name: *const ::std::os::raw::c_char,
        color: sfColor,
    );
}
extern "C" {
    pub fn sfShader_setTransformParameter(
        shader: *mut sfShader,
        name: *const ::std::os::raw::c_char,
        transform: sfTransform,
    );
}
extern "C" {
    pub fn sfShader_setTextureParameter(
        shader: *mut sfShader,
        name: *const ::std::os::raw::c_char,
        texture: *const sfTexture,
    );
}
extern "C" {
    pub fn sfShader_setCurrentTextureParameter(
        shader: *mut sfShader,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn sfShader_getNativeHandle(shader: *const sfShader) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sfShader_bind(shader: *const sfShader);
}
extern "C" {
    pub fn sfShader_isAvailable() -> sfBool;
}
extern "C" {
    pub fn sfShader_isGeometryAvailable() -> sfBool;
}
pub type sfShapeGetPointCountCallback =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> usize>;
pub type sfShapeGetPointCallback = ::std::option::Option<
    unsafe extern "C" fn(arg1: usize, arg2: *mut ::std::os::raw::c_void) -> sfVector2f,
>;
extern "C" {
    pub fn sfShape_create(
        getPointCount: sfShapeGetPointCountCallback,
        getPoint: sfShapeGetPointCallback,
        userData: *mut ::std::os::raw::c_void,
    ) -> *mut sfShape;
}
extern "C" {
    pub fn sfShape_destroy(shape: *mut sfShape);
}
extern "C" {
    pub fn sfShape_setPosition(shape: *mut sfShape, position: sfVector2f);
}
extern "C" {
    pub fn sfShape_setRotation(shape: *mut sfShape, angle: f32);
}
extern "C" {
    pub fn sfShape_setScale(shape: *mut sfShape, scale: sfVector2f);
}
extern "C" {
    pub fn sfShape_setOrigin(shape: *mut sfShape, origin: sfVector2f);
}
extern "C" {
    pub fn sfShape_getPosition(shape: *const sfShape) -> sfVector2f;
}
extern "C" {
    pub fn sfShape_getRotation(shape: *const sfShape) -> f32;
}
extern "C" {
    pub fn sfShape_getScale(shape: *const sfShape) -> sfVector2f;
}
extern "C" {
    pub fn sfShape_getOrigin(shape: *const sfShape) -> sfVector2f;
}
extern "C" {
    pub fn sfShape_move(shape: *mut sfShape, offset: sfVector2f);
}
extern "C" {
    pub fn sfShape_rotate(shape: *mut sfShape, angle: f32);
}
extern "C" {
    pub fn sfShape_scale(shape: *mut sfShape, factors: sfVector2f);
}
extern "C" {
    pub fn sfShape_getTransform(shape: *const sfShape) -> sfTransform;
}
extern "C" {
    pub fn sfShape_getInverseTransform(shape: *const sfShape) -> sfTransform;
}
extern "C" {
    pub fn sfShape_setTexture(shape: *mut sfShape, texture: *const sfTexture, resetRect: sfBool);
}
extern "C" {
    pub fn sfShape_setTextureRect(shape: *mut sfShape, rect: sfIntRect);
}
extern "C" {
    pub fn sfShape_setFillColor(shape: *mut sfShape, color: sfColor);
}
extern "C" {
    pub fn sfShape_setOutlineColor(shape: *mut sfShape, color: sfColor);
}
extern "C" {
    pub fn sfShape_setOutlineThickness(shape: *mut sfShape, thickness: f32);
}
extern "C" {
    pub fn sfShape_getTexture(shape: *const sfShape) -> *const sfTexture;
}
extern "C" {
    pub fn sfShape_getTextureRect(shape: *const sfShape) -> sfIntRect;
}
extern "C" {
    pub fn sfShape_getFillColor(shape: *const sfShape) -> sfColor;
}
extern "C" {
    pub fn sfShape_getOutlineColor(shape: *const sfShape) -> sfColor;
}
extern "C" {
    pub fn sfShape_getOutlineThickness(shape: *const sfShape) -> f32;
}
extern "C" {
    pub fn sfShape_getPointCount(shape: *const sfShape) -> usize;
}
extern "C" {
    pub fn sfShape_getPoint(shape: *const sfShape, index: usize) -> sfVector2f;
}
extern "C" {
    pub fn sfShape_getLocalBounds(shape: *const sfShape) -> sfFloatRect;
}
extern "C" {
    pub fn sfShape_getGlobalBounds(shape: *const sfShape) -> sfFloatRect;
}
extern "C" {
    pub fn sfShape_update(shape: *mut sfShape);
}
extern "C" {
    pub fn sfSprite_create() -> *mut sfSprite;
}
extern "C" {
    pub fn sfSprite_copy(sprite: *const sfSprite) -> *mut sfSprite;
}
extern "C" {
    pub fn sfSprite_destroy(sprite: *mut sfSprite);
}
extern "C" {
    pub fn sfSprite_setPosition(sprite: *mut sfSprite, position: sfVector2f);
}
extern "C" {
    pub fn sfSprite_setRotation(sprite: *mut sfSprite, angle: f32);
}
extern "C" {
    pub fn sfSprite_setScale(sprite: *mut sfSprite, scale: sfVector2f);
}
extern "C" {
    pub fn sfSprite_setOrigin(sprite: *mut sfSprite, origin: sfVector2f);
}
extern "C" {
    pub fn sfSprite_getPosition(sprite: *const sfSprite) -> sfVector2f;
}
extern "C" {
    pub fn sfSprite_getRotation(sprite: *const sfSprite) -> f32;
}
extern "C" {
    pub fn sfSprite_getScale(sprite: *const sfSprite) -> sfVector2f;
}
extern "C" {
    pub fn sfSprite_getOrigin(sprite: *const sfSprite) -> sfVector2f;
}
extern "C" {
    pub fn sfSprite_move(sprite: *mut sfSprite, offset: sfVector2f);
}
extern "C" {
    pub fn sfSprite_rotate(sprite: *mut sfSprite, angle: f32);
}
extern "C" {
    pub fn sfSprite_scale(sprite: *mut sfSprite, factors: sfVector2f);
}
extern "C" {
    pub fn sfSprite_getTransform(sprite: *const sfSprite) -> sfTransform;
}
extern "C" {
    pub fn sfSprite_getInverseTransform(sprite: *const sfSprite) -> sfTransform;
}
extern "C" {
    pub fn sfSprite_setTexture(sprite: *mut sfSprite, texture: *const sfTexture, resetRect: sfBool);
}
extern "C" {
    pub fn sfSprite_setTextureRect(sprite: *mut sfSprite, rectangle: sfIntRect);
}
extern "C" {
    pub fn sfSprite_setColor(sprite: *mut sfSprite, color: sfColor);
}
extern "C" {
    pub fn sfSprite_getTexture(sprite: *const sfSprite) -> *const sfTexture;
}
extern "C" {
    pub fn sfSprite_getTextureRect(sprite: *const sfSprite) -> sfIntRect;
}
extern "C" {
    pub fn sfSprite_getColor(sprite: *const sfSprite) -> sfColor;
}
extern "C" {
    pub fn sfSprite_getLocalBounds(sprite: *const sfSprite) -> sfFloatRect;
}
extern "C" {
    pub fn sfSprite_getGlobalBounds(sprite: *const sfSprite) -> sfFloatRect;
}
pub const sfTextStyle_sfTextRegular: sfTextStyle = 0;
pub const sfTextStyle_sfTextBold: sfTextStyle = 1;
pub const sfTextStyle_sfTextItalic: sfTextStyle = 2;
pub const sfTextStyle_sfTextUnderlined: sfTextStyle = 4;
pub const sfTextStyle_sfTextStrikeThrough: sfTextStyle = 8;
pub type sfTextStyle = ::std::os::raw::c_uint;
extern "C" {
    pub fn sfText_create() -> *mut sfText;
}
extern "C" {
    pub fn sfText_copy(text: *const sfText) -> *mut sfText;
}
extern "C" {
    pub fn sfText_destroy(text: *mut sfText);
}
extern "C" {
    pub fn sfText_setPosition(text: *mut sfText, position: sfVector2f);
}
extern "C" {
    pub fn sfText_setRotation(text: *mut sfText, angle: f32);
}
extern "C" {
    pub fn sfText_setScale(text: *mut sfText, scale: sfVector2f);
}
extern "C" {
    pub fn sfText_setOrigin(text: *mut sfText, origin: sfVector2f);
}
extern "C" {
    pub fn sfText_getPosition(text: *const sfText) -> sfVector2f;
}
extern "C" {
    pub fn sfText_getRotation(text: *const sfText) -> f32;
}
extern "C" {
    pub fn sfText_getScale(text: *const sfText) -> sfVector2f;
}
extern "C" {
    pub fn sfText_getOrigin(text: *const sfText) -> sfVector2f;
}
extern "C" {
    pub fn sfText_move(text: *mut sfText, offset: sfVector2f);
}
extern "C" {
    pub fn sfText_rotate(text: *mut sfText, angle: f32);
}
extern "C" {
    pub fn sfText_scale(text: *mut sfText, factors: sfVector2f);
}
extern "C" {
    pub fn sfText_getTransform(text: *const sfText) -> sfTransform;
}
extern "C" {
    pub fn sfText_getInverseTransform(text: *const sfText) -> sfTransform;
}
extern "C" {
    pub fn sfText_setString(text: *mut sfText, string: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn sfText_setUnicodeString(text: *mut sfText, string: *const sfUint32);
}
extern "C" {
    pub fn sfText_setFont(text: *mut sfText, font: *const sfFont);
}
extern "C" {
    pub fn sfText_setCharacterSize(text: *mut sfText, size: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn sfText_setLineSpacing(text: *mut sfText, spacingFactor: f32);
}
extern "C" {
    pub fn sfText_setLetterSpacing(text: *mut sfText, spacingFactor: f32);
}
extern "C" {
    pub fn sfText_setStyle(text: *mut sfText, style: sfUint32);
}
extern "C" {
    pub fn sfText_setColor(text: *mut sfText, color: sfColor);
}
extern "C" {
    pub fn sfText_setFillColor(text: *mut sfText, color: sfColor);
}
extern "C" {
    pub fn sfText_setOutlineColor(text: *mut sfText, color: sfColor);
}
extern "C" {
    pub fn sfText_setOutlineThickness(text: *mut sfText, thickness: f32);
}
extern "C" {
    pub fn sfText_getString(text: *const sfText) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sfText_getUnicodeString(text: *const sfText) -> *const sfUint32;
}
extern "C" {
    pub fn sfText_getFont(text: *const sfText) -> *const sfFont;
}
extern "C" {
    pub fn sfText_getCharacterSize(text: *const sfText) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sfText_getLetterSpacing(text: *const sfText) -> f32;
}
extern "C" {
    pub fn getLineSpacing(text: *const sfText) -> f32;
}
extern "C" {
    pub fn sfText_getStyle(text: *const sfText) -> sfUint32;
}
extern "C" {
    pub fn sfText_getColor(text: *const sfText) -> sfColor;
}
extern "C" {
    pub fn sfText_getFillColor(text: *const sfText) -> sfColor;
}
extern "C" {
    pub fn sfText_getOutlineColor(text: *const sfText) -> sfColor;
}
extern "C" {
    pub fn sfText_getOutlineThickness(text: *const sfText) -> f32;
}
extern "C" {
    pub fn sfText_findCharacterPos(text: *const sfText, index: usize) -> sfVector2f;
}
extern "C" {
    pub fn sfText_getLocalBounds(text: *const sfText) -> sfFloatRect;
}
extern "C" {
    pub fn sfText_getGlobalBounds(text: *const sfText) -> sfFloatRect;
}
extern "C" {
    pub fn sfTexture_create(
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
    ) -> *mut sfTexture;
}
extern "C" {
    pub fn sfTexture_createFromFile(
        filename: *const ::std::os::raw::c_char,
        area: *const sfIntRect,
    ) -> *mut sfTexture;
}
extern "C" {
    pub fn sfTexture_createFromMemory(
        data: *const ::std::os::raw::c_void,
        sizeInBytes: usize,
        area: *const sfIntRect,
    ) -> *mut sfTexture;
}
extern "C" {
    pub fn sfTexture_createFromStream(
        stream: *mut sfInputStream,
        area: *const sfIntRect,
    ) -> *mut sfTexture;
}
extern "C" {
    pub fn sfTexture_createFromImage(
        image: *const sfImage,
        area: *const sfIntRect,
    ) -> *mut sfTexture;
}
extern "C" {
    pub fn sfTexture_copy(texture: *const sfTexture) -> *mut sfTexture;
}
extern "C" {
    pub fn sfTexture_destroy(texture: *mut sfTexture);
}
extern "C" {
    pub fn sfTexture_getSize(texture: *const sfTexture) -> sfVector2u;
}
extern "C" {
    pub fn sfTexture_copyToImage(texture: *const sfTexture) -> *mut sfImage;
}
extern "C" {
    pub fn sfTexture_updateFromPixels(
        texture: *mut sfTexture,
        pixels: *const sfUint8,
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
        x: ::std::os::raw::c_uint,
        y: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn sfTexture_updateFromTexture(
        destination: *mut sfTexture,
        source: *const sfTexture,
        x: ::std::os::raw::c_uint,
        y: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn sfTexture_updateFromImage(
        texture: *mut sfTexture,
        image: *const sfImage,
        x: ::std::os::raw::c_uint,
        y: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn sfTexture_updateFromWindow(
        texture: *mut sfTexture,
        window: *const sfWindow,
        x: ::std::os::raw::c_uint,
        y: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn sfTexture_updateFromRenderWindow(
        texture: *mut sfTexture,
        renderWindow: *const sfRenderWindow,
        x: ::std::os::raw::c_uint,
        y: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn sfTexture_setSmooth(texture: *mut sfTexture, smooth: sfBool);
}
extern "C" {
    pub fn sfTexture_isSmooth(texture: *const sfTexture) -> sfBool;
}
extern "C" {
    pub fn sfTexture_setSrgb(texture: *mut sfTexture, sRgb: sfBool);
}
extern "C" {
    pub fn sfTexture_isSrgb(texture: *const sfTexture) -> sfBool;
}
extern "C" {
    pub fn sfTexture_setRepeated(texture: *mut sfTexture, repeated: sfBool);
}
extern "C" {
    pub fn sfTexture_isRepeated(texture: *const sfTexture) -> sfBool;
}
extern "C" {
    pub fn sfTexture_generateMipmap(texture: *mut sfTexture) -> sfBool;
}
extern "C" {
    pub fn sfTexture_swap(left: *mut sfTexture, right: *mut sfTexture);
}
extern "C" {
    pub fn sfTexture_getNativeHandle(texture: *const sfTexture) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sfTexture_bind(texture: *const sfTexture);
}
extern "C" {
    pub fn sfTexture_getMaximumSize() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sfTransformable_create() -> *mut sfTransformable;
}
extern "C" {
    pub fn sfTransformable_copy(transformable: *const sfTransformable) -> *mut sfTransformable;
}
extern "C" {
    pub fn sfTransformable_destroy(transformable: *mut sfTransformable);
}
extern "C" {
    pub fn sfTransformable_setPosition(transformable: *mut sfTransformable, position: sfVector2f);
}
extern "C" {
    pub fn sfTransformable_setRotation(transformable: *mut sfTransformable, angle: f32);
}
extern "C" {
    pub fn sfTransformable_setScale(transformable: *mut sfTransformable, scale: sfVector2f);
}
extern "C" {
    pub fn sfTransformable_setOrigin(transformable: *mut sfTransformable, origin: sfVector2f);
}
extern "C" {
    pub fn sfTransformable_getPosition(transformable: *const sfTransformable) -> sfVector2f;
}
extern "C" {
    pub fn sfTransformable_getRotation(transformable: *const sfTransformable) -> f32;
}
extern "C" {
    pub fn sfTransformable_getScale(transformable: *const sfTransformable) -> sfVector2f;
}
extern "C" {
    pub fn sfTransformable_getOrigin(transformable: *const sfTransformable) -> sfVector2f;
}
extern "C" {
    pub fn sfTransformable_move(transformable: *mut sfTransformable, offset: sfVector2f);
}
extern "C" {
    pub fn sfTransformable_rotate(transformable: *mut sfTransformable, angle: f32);
}
extern "C" {
    pub fn sfTransformable_scale(transformable: *mut sfTransformable, factors: sfVector2f);
}
extern "C" {
    pub fn sfTransformable_getTransform(transformable: *const sfTransformable) -> sfTransform;
}
extern "C" {
    pub fn sfTransformable_getInverseTransform(
        transformable: *const sfTransformable,
    ) -> sfTransform;
}
extern "C" {
    pub fn sfVertexArray_create() -> *mut sfVertexArray;
}
extern "C" {
    pub fn sfVertexArray_copy(vertexArray: *const sfVertexArray) -> *mut sfVertexArray;
}
extern "C" {
    pub fn sfVertexArray_destroy(vertexArray: *mut sfVertexArray);
}
extern "C" {
    pub fn sfVertexArray_getVertexCount(vertexArray: *const sfVertexArray) -> usize;
}
extern "C" {
    pub fn sfVertexArray_getVertex(vertexArray: *mut sfVertexArray, index: usize) -> *mut sfVertex;
}
extern "C" {
    pub fn sfVertexArray_clear(vertexArray: *mut sfVertexArray);
}
extern "C" {
    pub fn sfVertexArray_resize(vertexArray: *mut sfVertexArray, vertexCount: usize);
}
extern "C" {
    pub fn sfVertexArray_append(vertexArray: *mut sfVertexArray, vertex: sfVertex);
}
extern "C" {
    pub fn sfVertexArray_setPrimitiveType(vertexArray: *mut sfVertexArray, type_: sfPrimitiveType);
}
extern "C" {
    pub fn sfVertexArray_getPrimitiveType(vertexArray: *mut sfVertexArray) -> sfPrimitiveType;
}
extern "C" {
    pub fn sfVertexArray_getBounds(vertexArray: *mut sfVertexArray) -> sfFloatRect;
}
pub const sfVertexBufferUsage_sfVertexBufferStream: sfVertexBufferUsage = 0;
pub const sfVertexBufferUsage_sfVertexBufferDynamic: sfVertexBufferUsage = 1;
pub const sfVertexBufferUsage_sfVertexBufferStatic: sfVertexBufferUsage = 2;
pub type sfVertexBufferUsage = ::std::os::raw::c_uint;
extern "C" {
    pub fn sfVertexBuffer_create(
        vertexCount: ::std::os::raw::c_uint,
        type_: sfPrimitiveType,
        usage: sfVertexBufferUsage,
    ) -> *mut sfVertexBuffer;
}
extern "C" {
    pub fn sfVertexBuffer_copy(vertexBuffer: *const sfVertexBuffer) -> *mut sfVertexBuffer;
}
extern "C" {
    pub fn sfVertexBuffer_destroy(vertexBuffer: *mut sfVertexBuffer);
}
extern "C" {
    pub fn sfVertexBuffer_getVertexCount(
        vertexBuffer: *const sfVertexBuffer,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sfVertexBuffer_update(
        vertexBuffer: *mut sfVertexBuffer,
        vertices: *const sfVertex,
        vertexCount: ::std::os::raw::c_uint,
        offset: ::std::os::raw::c_uint,
    ) -> sfBool;
}
extern "C" {
    pub fn sfVertexBuffer_updateFromVertexBuffer(
        vertexBuffer: *mut sfVertexBuffer,
        other: *const sfVertexBuffer,
    ) -> sfBool;
}
extern "C" {
    pub fn sfVertexBuffer_swap(left: *mut sfVertexBuffer, right: *mut sfVertexBuffer);
}
extern "C" {
    pub fn sfVertexBuffer_getNativeHandle(
        vertexBuffer: *mut sfVertexBuffer,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sfVertexBuffer_setPrimitiveType(
        vertexBuffer: *mut sfVertexBuffer,
        type_: sfPrimitiveType,
    );
}
extern "C" {
    pub fn sfVertexBuffer_getPrimitiveType(vertexBuffer: *const sfVertexBuffer) -> sfPrimitiveType;
}
extern "C" {
    pub fn sfVertexBuffer_setUsage(vertexBuffer: *mut sfVertexBuffer, usage: sfVertexBufferUsage);
}
extern "C" {
    pub fn sfVertexBuffer_getUsage(vertexBuffer: *const sfVertexBuffer) -> sfVertexBufferUsage;
}
extern "C" {
    pub fn sfVertexBuffer_bind(vertexBuffer: *const sfVertexBuffer);
}
extern "C" {
    pub fn sfVertexBuffer_isAvailable() -> sfBool;
}
extern "C" {
    pub fn sfView_create() -> *mut sfView;
}
extern "C" {
    pub fn sfView_createFromRect(rectangle: sfFloatRect) -> *mut sfView;
}
extern "C" {
    pub fn sfView_copy(view: *const sfView) -> *mut sfView;
}
extern "C" {
    pub fn sfView_destroy(view: *mut sfView);
}
extern "C" {
    pub fn sfView_setCenter(view: *mut sfView, center: sfVector2f);
}
extern "C" {
    pub fn sfView_setSize(view: *mut sfView, size: sfVector2f);
}
extern "C" {
    pub fn sfView_setRotation(view: *mut sfView, angle: f32);
}
extern "C" {
    pub fn sfView_setViewport(view: *mut sfView, viewport: sfFloatRect);
}
extern "C" {
    pub fn sfView_reset(view: *mut sfView, rectangle: sfFloatRect);
}
extern "C" {
    pub fn sfView_getCenter(view: *const sfView) -> sfVector2f;
}
extern "C" {
    pub fn sfView_getSize(view: *const sfView) -> sfVector2f;
}
extern "C" {
    pub fn sfView_getRotation(view: *const sfView) -> f32;
}
extern "C" {
    pub fn sfView_getViewport(view: *const sfView) -> sfFloatRect;
}
extern "C" {
    pub fn sfView_move(view: *mut sfView, offset: sfVector2f);
}
extern "C" {
    pub fn sfView_rotate(view: *mut sfView, angle: f32);
}
extern "C" {
    pub fn sfView_zoom(view: *mut sfView, factor: f32);
}
