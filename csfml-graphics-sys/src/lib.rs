/* automatically generated by rust-bindgen */

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]

// -- Manual additions --
extern crate csfml_system_sys;
extern crate csfml_window_sys;

use csfml_system_sys::*;
use csfml_window_sys::*;
// -- End manual additions --

// Manually edited to replace `size_t` with `usize`.

#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
#[derive(PartialEq, Eq, PartialOrd, Ord)] // Required by rust-sfml
pub enum sfBlendFactor {
    sfBlendFactorZero = 0,
    sfBlendFactorOne = 1,
    sfBlendFactorSrcColor = 2,
    sfBlendFactorOneMinusSrcColor = 3,
    sfBlendFactorDstColor = 4,
    sfBlendFactorOneMinusDstColor = 5,
    sfBlendFactorSrcAlpha = 6,
    sfBlendFactorOneMinusSrcAlpha = 7,
    sfBlendFactorDstAlpha = 8,
    sfBlendFactorOneMinusDstAlpha = 9,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
#[derive(PartialEq, Eq, PartialOrd, Ord)] // Required by rust-sfml
pub enum sfBlendEquation {
    sfBlendEquationAdd = 0,
    sfBlendEquationSubtract = 1,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
#[derive(PartialEq, Eq, PartialOrd, Ord)] // Required by rust-sfml
pub struct sfBlendMode {
    pub colorSrcFactor: sfBlendFactor,
    pub colorDstFactor: sfBlendFactor,
    pub colorEquation: sfBlendEquation,
    pub alphaSrcFactor: sfBlendFactor,
    pub alphaDstFactor: sfBlendFactor,
    pub alphaEquation: sfBlendEquation,
}
impl ::std::default::Default for sfBlendMode {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
#[derive(PartialEq, Eq)] // Required by rust-sfml
pub struct sfColor {
    pub r: sfUint8,
    pub g: sfUint8,
    pub b: sfUint8,
    pub a: sfUint8,
}
impl ::std::default::Default for sfColor {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sfFloatRect {
    pub left: f32,
    pub top: f32,
    pub width: f32,
    pub height: f32,
}
impl ::std::default::Default for sfFloatRect {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sfIntRect {
    pub left: ::std::os::raw::c_int,
    pub top: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
}
impl ::std::default::Default for sfIntRect {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum sfCircleShape { }
pub enum sfConvexShape { }
pub enum sfFont { }
pub enum sfImage { }
pub enum sfShader { }
pub enum sfRectangleShape { }
pub enum sfRenderTexture { }
pub enum sfRenderWindow { }
pub enum sfShape { }
pub enum sfSprite { }
pub enum sfText { }
pub enum sfTexture { }
pub enum sfTransformable { }
pub enum sfVertexArray { }
pub enum sfView { }
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sfTransform {
    pub matrix: [f32; 9usize],
}
impl ::std::default::Default for sfTransform {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sfFontInfo {
    pub family: *const ::std::os::raw::c_char,
}
impl ::std::default::Default for sfFontInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sfGlyph {
    pub advance: f32,
    pub bounds: sfFloatRect,
    pub textureRect: sfIntRect,
}
impl ::std::default::Default for sfGlyph {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum sfPrimitiveType {
    sfPoints = 0,
    sfLines = 1,
    sfLinesStrip = 2,
    sfTriangles = 3,
    sfTrianglesStrip = 4,
    sfTrianglesFan = 5,
    sfQuads = 6,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sfRenderStates {
    pub blendMode: sfBlendMode,
    pub transform: sfTransform,
    pub texture: *const sfTexture,
    pub shader: *const sfShader,
}
impl ::std::default::Default for sfRenderStates {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sfVertex {
    pub position: sfVector2f,
    pub color: sfColor,
    pub texCoords: sfVector2f,
}
impl ::std::default::Default for sfVertex {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type sfShapeGetPointCountCallback =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *mut ::std::os::raw::c_void)
                              -> usize>;
pub type sfShapeGetPointCallback =
    ::std::option::Option<unsafe extern "C" fn(arg1: usize,
                                               arg2:
                                                   *mut ::std::os::raw::c_void)
                              -> sfVector2f>;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum sfTextStyle {
    sfTextRegular = 0,
    sfTextBold = 1,
    sfTextItalic = 2,
    sfTextUnderlined = 4,
    sfTextStrikeThrough = 8,
}
extern "C" {
    pub static sfBlendAlpha: sfBlendMode;
    pub static sfBlendAdd: sfBlendMode;
    pub static sfBlendMultiply: sfBlendMode;
    pub static sfBlendNone: sfBlendMode;
    pub static mut sfBlack: sfColor;
    pub static mut sfWhite: sfColor;
    pub static mut sfRed: sfColor;
    pub static mut sfGreen: sfColor;
    pub static mut sfBlue: sfColor;
    pub static mut sfYellow: sfColor;
    pub static mut sfMagenta: sfColor;
    pub static mut sfCyan: sfColor;
    pub static mut sfTransparent: sfColor;
    pub static sfTransform_Identity: sfTransform;
}
extern "C" {
    pub fn sfColor_fromRGB(red: sfUint8, green: sfUint8, blue: sfUint8)
     -> sfColor;
    pub fn sfColor_fromRGBA(red: sfUint8, green: sfUint8, blue: sfUint8,
                            alpha: sfUint8) -> sfColor;
    pub fn sfColor_fromInteger(color: sfUint32) -> sfColor;
    pub fn sfColor_toInteger(color: sfColor) -> sfUint32;
    pub fn sfColor_add(color1: sfColor, color2: sfColor) -> sfColor;
    pub fn sfColor_subtract(color1: sfColor, color2: sfColor) -> sfColor;
    pub fn sfColor_modulate(color1: sfColor, color2: sfColor) -> sfColor;
    pub fn sfFloatRect_contains(rect: *const sfFloatRect, x: f32, y: f32)
     -> sfBool;
    pub fn sfIntRect_contains(rect: *const sfIntRect,
                              x: ::std::os::raw::c_int,
                              y: ::std::os::raw::c_int) -> sfBool;
    pub fn sfFloatRect_intersects(rect1: *const sfFloatRect,
                                  rect2: *const sfFloatRect,
                                  intersection: *mut sfFloatRect) -> sfBool;
    pub fn sfIntRect_intersects(rect1: *const sfIntRect,
                                rect2: *const sfIntRect,
                                intersection: *mut sfIntRect) -> sfBool;
    pub fn sfTransform_fromMatrix(a00: f32, a01: f32, a02: f32, a10: f32,
                                  a11: f32, a12: f32, a20: f32, a21: f32,
                                  a22: f32) -> sfTransform;
    pub fn sfTransform_getMatrix(transform: *const sfTransform,
                                 matrix: *mut f32);
    pub fn sfTransform_getInverse(transform: *const sfTransform)
     -> sfTransform;
    pub fn sfTransform_transformPoint(transform: *const sfTransform,
                                      point: sfVector2f) -> sfVector2f;
    pub fn sfTransform_transformRect(transform: *const sfTransform,
                                     rectangle: sfFloatRect) -> sfFloatRect;
    pub fn sfTransform_combine(transform: *mut sfTransform,
                               other: *const sfTransform);
    pub fn sfTransform_translate(transform: *mut sfTransform, x: f32, y: f32);
    pub fn sfTransform_rotate(transform: *mut sfTransform, angle: f32);
    pub fn sfTransform_rotateWithCenter(transform: *mut sfTransform,
                                        angle: f32, centerX: f32,
                                        centerY: f32);
    pub fn sfTransform_scale(transform: *mut sfTransform, scaleX: f32,
                             scaleY: f32);
    pub fn sfTransform_scaleWithCenter(transform: *mut sfTransform,
                                       scaleX: f32, scaleY: f32, centerX: f32,
                                       centerY: f32);
    pub fn sfCircleShape_create() -> *mut sfCircleShape;
    pub fn sfCircleShape_copy(shape: *const sfCircleShape)
     -> *mut sfCircleShape;
    pub fn sfCircleShape_destroy(shape: *mut sfCircleShape);
    pub fn sfCircleShape_setPosition(shape: *mut sfCircleShape,
                                     position: sfVector2f);
    pub fn sfCircleShape_setRotation(shape: *mut sfCircleShape, angle: f32);
    pub fn sfCircleShape_setScale(shape: *mut sfCircleShape,
                                  scale: sfVector2f);
    pub fn sfCircleShape_setOrigin(shape: *mut sfCircleShape,
                                   origin: sfVector2f);
    pub fn sfCircleShape_getPosition(shape: *const sfCircleShape)
     -> sfVector2f;
    pub fn sfCircleShape_getRotation(shape: *const sfCircleShape) -> f32;
    pub fn sfCircleShape_getScale(shape: *const sfCircleShape) -> sfVector2f;
    pub fn sfCircleShape_getOrigin(shape: *const sfCircleShape) -> sfVector2f;
    pub fn sfCircleShape_move(shape: *mut sfCircleShape, offset: sfVector2f);
    pub fn sfCircleShape_rotate(shape: *mut sfCircleShape, angle: f32);
    pub fn sfCircleShape_scale(shape: *mut sfCircleShape,
                               factors: sfVector2f);
    pub fn sfCircleShape_getTransform(shape: *const sfCircleShape)
     -> sfTransform;
    pub fn sfCircleShape_getInverseTransform(shape: *const sfCircleShape)
     -> sfTransform;
    pub fn sfCircleShape_setTexture(shape: *mut sfCircleShape,
                                    texture: *const sfTexture,
                                    resetRect: sfBool);
    pub fn sfCircleShape_setTextureRect(shape: *mut sfCircleShape,
                                        rect: sfIntRect);
    pub fn sfCircleShape_setFillColor(shape: *mut sfCircleShape,
                                      color: sfColor);
    pub fn sfCircleShape_setOutlineColor(shape: *mut sfCircleShape,
                                         color: sfColor);
    pub fn sfCircleShape_setOutlineThickness(shape: *mut sfCircleShape,
                                             thickness: f32);
    pub fn sfCircleShape_getTexture(shape: *const sfCircleShape)
     -> *const sfTexture;
    pub fn sfCircleShape_getTextureRect(shape: *const sfCircleShape)
     -> sfIntRect;
    pub fn sfCircleShape_getFillColor(shape: *const sfCircleShape) -> sfColor;
    pub fn sfCircleShape_getOutlineColor(shape: *const sfCircleShape)
     -> sfColor;
    pub fn sfCircleShape_getOutlineThickness(shape: *const sfCircleShape)
     -> f32;
    pub fn sfCircleShape_getPointCount(shape: *const sfCircleShape) -> usize;
    pub fn sfCircleShape_getPoint(shape: *const sfCircleShape, index: usize)
     -> sfVector2f;
    pub fn sfCircleShape_setRadius(shape: *mut sfCircleShape, radius: f32);
    pub fn sfCircleShape_getRadius(shape: *const sfCircleShape) -> f32;
    pub fn sfCircleShape_setPointCount(shape: *mut sfCircleShape,
                                       count: usize);
    pub fn sfCircleShape_getLocalBounds(shape: *const sfCircleShape)
     -> sfFloatRect;
    pub fn sfCircleShape_getGlobalBounds(shape: *const sfCircleShape)
     -> sfFloatRect;
    pub fn sfConvexShape_create() -> *mut sfConvexShape;
    pub fn sfConvexShape_copy(shape: *const sfConvexShape)
     -> *mut sfConvexShape;
    pub fn sfConvexShape_destroy(shape: *mut sfConvexShape);
    pub fn sfConvexShape_setPosition(shape: *mut sfConvexShape,
                                     position: sfVector2f);
    pub fn sfConvexShape_setRotation(shape: *mut sfConvexShape, angle: f32);
    pub fn sfConvexShape_setScale(shape: *mut sfConvexShape,
                                  scale: sfVector2f);
    pub fn sfConvexShape_setOrigin(shape: *mut sfConvexShape,
                                   origin: sfVector2f);
    pub fn sfConvexShape_getPosition(shape: *const sfConvexShape)
     -> sfVector2f;
    pub fn sfConvexShape_getRotation(shape: *const sfConvexShape) -> f32;
    pub fn sfConvexShape_getScale(shape: *const sfConvexShape) -> sfVector2f;
    pub fn sfConvexShape_getOrigin(shape: *const sfConvexShape) -> sfVector2f;
    pub fn sfConvexShape_move(shape: *mut sfConvexShape, offset: sfVector2f);
    pub fn sfConvexShape_rotate(shape: *mut sfConvexShape, angle: f32);
    pub fn sfConvexShape_scale(shape: *mut sfConvexShape,
                               factors: sfVector2f);
    pub fn sfConvexShape_getTransform(shape: *const sfConvexShape)
     -> sfTransform;
    pub fn sfConvexShape_getInverseTransform(shape: *const sfConvexShape)
     -> sfTransform;
    pub fn sfConvexShape_setTexture(shape: *mut sfConvexShape,
                                    texture: *const sfTexture,
                                    resetRect: sfBool);
    pub fn sfConvexShape_setTextureRect(shape: *mut sfConvexShape,
                                        rect: sfIntRect);
    pub fn sfConvexShape_setFillColor(shape: *mut sfConvexShape,
                                      color: sfColor);
    pub fn sfConvexShape_setOutlineColor(shape: *mut sfConvexShape,
                                         color: sfColor);
    pub fn sfConvexShape_setOutlineThickness(shape: *mut sfConvexShape,
                                             thickness: f32);
    pub fn sfConvexShape_getTexture(shape: *const sfConvexShape)
     -> *const sfTexture;
    pub fn sfConvexShape_getTextureRect(shape: *const sfConvexShape)
     -> sfIntRect;
    pub fn sfConvexShape_getFillColor(shape: *const sfConvexShape) -> sfColor;
    pub fn sfConvexShape_getOutlineColor(shape: *const sfConvexShape)
     -> sfColor;
    pub fn sfConvexShape_getOutlineThickness(shape: *const sfConvexShape)
     -> f32;
    pub fn sfConvexShape_getPointCount(shape: *const sfConvexShape) -> usize;
    pub fn sfConvexShape_getPoint(shape: *const sfConvexShape, index: usize)
     -> sfVector2f;
    pub fn sfConvexShape_setPointCount(shape: *mut sfConvexShape,
                                       count: usize);
    pub fn sfConvexShape_setPoint(shape: *mut sfConvexShape, index: usize,
                                  point: sfVector2f);
    pub fn sfConvexShape_getLocalBounds(shape: *const sfConvexShape)
     -> sfFloatRect;
    pub fn sfConvexShape_getGlobalBounds(shape: *const sfConvexShape)
     -> sfFloatRect;
    pub fn sfFont_createFromFile(filename: *const ::std::os::raw::c_char)
     -> *mut sfFont;
    pub fn sfFont_createFromMemory(data: *const ::std::os::raw::c_void,
                                   sizeInBytes: usize) -> *mut sfFont;
    pub fn sfFont_createFromStream(stream: *mut sfInputStream) -> *mut sfFont;
    pub fn sfFont_copy(font: *const sfFont) -> *mut sfFont;
    pub fn sfFont_destroy(font: *mut sfFont);
    pub fn sfFont_getGlyph(font: *mut sfFont, codePoint: sfUint32,
                           characterSize: ::std::os::raw::c_uint,
                           bold: sfBool) -> sfGlyph;
    pub fn sfFont_getKerning(font: *mut sfFont, first: sfUint32,
                             second: sfUint32,
                             characterSize: ::std::os::raw::c_uint) -> f32;
    pub fn sfFont_getLineSpacing(font: *mut sfFont,
                                 characterSize: ::std::os::raw::c_uint)
     -> f32;
    pub fn sfFont_getUnderlinePosition(font: *mut sfFont,
                                       characterSize: ::std::os::raw::c_uint)
     -> f32;
    pub fn sfFont_getUnderlineThickness(font: *mut sfFont,
                                        characterSize: ::std::os::raw::c_uint)
     -> f32;
    pub fn sfFont_getTexture(font: *mut sfFont,
                             characterSize: ::std::os::raw::c_uint)
     -> *const sfTexture;
    pub fn sfFont_getInfo(font: *const sfFont) -> sfFontInfo;
    pub fn sfImage_create(width: ::std::os::raw::c_uint,
                          height: ::std::os::raw::c_uint) -> *mut sfImage;
    pub fn sfImage_createFromColor(width: ::std::os::raw::c_uint,
                                   height: ::std::os::raw::c_uint,
                                   color: sfColor) -> *mut sfImage;
    pub fn sfImage_createFromPixels(width: ::std::os::raw::c_uint,
                                    height: ::std::os::raw::c_uint,
                                    pixels: *const sfUint8) -> *mut sfImage;
    pub fn sfImage_createFromFile(filename: *const ::std::os::raw::c_char)
     -> *mut sfImage;
    pub fn sfImage_createFromMemory(data: *const ::std::os::raw::c_void,
                                    size: usize) -> *mut sfImage;
    pub fn sfImage_createFromStream(stream: *mut sfInputStream)
     -> *mut sfImage;
    pub fn sfImage_copy(image: *const sfImage) -> *mut sfImage;
    pub fn sfImage_destroy(image: *mut sfImage);
    pub fn sfImage_saveToFile(image: *const sfImage,
                              filename: *const ::std::os::raw::c_char)
     -> sfBool;
    pub fn sfImage_getSize(image: *const sfImage) -> sfVector2u;
    pub fn sfImage_createMaskFromColor(image: *mut sfImage, color: sfColor,
                                       alpha: sfUint8);
    pub fn sfImage_copyImage(image: *mut sfImage, source: *const sfImage,
                             destX: ::std::os::raw::c_uint,
                             destY: ::std::os::raw::c_uint,
                             sourceRect: sfIntRect, applyAlpha: sfBool);
    pub fn sfImage_setPixel(image: *mut sfImage, x: ::std::os::raw::c_uint,
                            y: ::std::os::raw::c_uint, color: sfColor);
    pub fn sfImage_getPixel(image: *const sfImage, x: ::std::os::raw::c_uint,
                            y: ::std::os::raw::c_uint) -> sfColor;
    pub fn sfImage_getPixelsPtr(image: *const sfImage) -> *const sfUint8;
    pub fn sfImage_flipHorizontally(image: *mut sfImage);
    pub fn sfImage_flipVertically(image: *mut sfImage);
    pub fn sfRectangleShape_create() -> *mut sfRectangleShape;
    pub fn sfRectangleShape_copy(shape: *const sfRectangleShape)
     -> *mut sfRectangleShape;
    pub fn sfRectangleShape_destroy(shape: *mut sfRectangleShape);
    pub fn sfRectangleShape_setPosition(shape: *mut sfRectangleShape,
                                        position: sfVector2f);
    pub fn sfRectangleShape_setRotation(shape: *mut sfRectangleShape,
                                        angle: f32);
    pub fn sfRectangleShape_setScale(shape: *mut sfRectangleShape,
                                     scale: sfVector2f);
    pub fn sfRectangleShape_setOrigin(shape: *mut sfRectangleShape,
                                      origin: sfVector2f);
    pub fn sfRectangleShape_getPosition(shape: *const sfRectangleShape)
     -> sfVector2f;
    pub fn sfRectangleShape_getRotation(shape: *const sfRectangleShape)
     -> f32;
    pub fn sfRectangleShape_getScale(shape: *const sfRectangleShape)
     -> sfVector2f;
    pub fn sfRectangleShape_getOrigin(shape: *const sfRectangleShape)
     -> sfVector2f;
    pub fn sfRectangleShape_move(shape: *mut sfRectangleShape,
                                 offset: sfVector2f);
    pub fn sfRectangleShape_rotate(shape: *mut sfRectangleShape, angle: f32);
    pub fn sfRectangleShape_scale(shape: *mut sfRectangleShape,
                                  factors: sfVector2f);
    pub fn sfRectangleShape_getTransform(shape: *const sfRectangleShape)
     -> sfTransform;
    pub fn sfRectangleShape_getInverseTransform(shape:
                                                    *const sfRectangleShape)
     -> sfTransform;
    pub fn sfRectangleShape_setTexture(shape: *mut sfRectangleShape,
                                       texture: *const sfTexture,
                                       resetRect: sfBool);
    pub fn sfRectangleShape_setTextureRect(shape: *mut sfRectangleShape,
                                           rect: sfIntRect);
    pub fn sfRectangleShape_setFillColor(shape: *mut sfRectangleShape,
                                         color: sfColor);
    pub fn sfRectangleShape_setOutlineColor(shape: *mut sfRectangleShape,
                                            color: sfColor);
    pub fn sfRectangleShape_setOutlineThickness(shape: *mut sfRectangleShape,
                                                thickness: f32);
    pub fn sfRectangleShape_getTexture(shape: *const sfRectangleShape)
     -> *const sfTexture;
    pub fn sfRectangleShape_getTextureRect(shape: *const sfRectangleShape)
     -> sfIntRect;
    pub fn sfRectangleShape_getFillColor(shape: *const sfRectangleShape)
     -> sfColor;
    pub fn sfRectangleShape_getOutlineColor(shape: *const sfRectangleShape)
     -> sfColor;
    pub fn sfRectangleShape_getOutlineThickness(shape:
                                                    *const sfRectangleShape)
     -> f32;
    pub fn sfRectangleShape_getPointCount(shape: *const sfRectangleShape)
     -> usize;
    pub fn sfRectangleShape_getPoint(shape: *const sfRectangleShape,
                                     index: usize) -> sfVector2f;
    pub fn sfRectangleShape_setSize(shape: *mut sfRectangleShape,
                                    size: sfVector2f);
    pub fn sfRectangleShape_getSize(shape: *const sfRectangleShape)
     -> sfVector2f;
    pub fn sfRectangleShape_getLocalBounds(shape: *const sfRectangleShape)
     -> sfFloatRect;
    pub fn sfRectangleShape_getGlobalBounds(shape: *const sfRectangleShape)
     -> sfFloatRect;
    pub fn sfRenderTexture_create(width: ::std::os::raw::c_uint,
                                  height: ::std::os::raw::c_uint,
                                  depthBuffer: sfBool)
     -> *mut sfRenderTexture;
    pub fn sfRenderTexture_destroy(renderTexture: *mut sfRenderTexture);
    pub fn sfRenderTexture_getSize(renderTexture: *const sfRenderTexture)
     -> sfVector2u;
    pub fn sfRenderTexture_setActive(renderTexture: *mut sfRenderTexture,
                                     active: sfBool) -> sfBool;
    pub fn sfRenderTexture_display(renderTexture: *mut sfRenderTexture);
    pub fn sfRenderTexture_clear(renderTexture: *mut sfRenderTexture,
                                 color: sfColor);
    pub fn sfRenderTexture_setView(renderTexture: *mut sfRenderTexture,
                                   view: *const sfView);
    pub fn sfRenderTexture_getView(renderTexture: *const sfRenderTexture)
     -> *const sfView;
    pub fn sfRenderTexture_getDefaultView(renderTexture:
                                              *const sfRenderTexture)
     -> *const sfView;
    pub fn sfRenderTexture_getViewport(renderTexture: *const sfRenderTexture,
                                       view: *const sfView) -> sfIntRect;
    pub fn sfRenderTexture_mapPixelToCoords(renderTexture:
                                                *const sfRenderTexture,
                                            point: sfVector2i,
                                            view: *const sfView)
     -> sfVector2f;
    pub fn sfRenderTexture_mapCoordsToPixel(renderTexture:
                                                *const sfRenderTexture,
                                            point: sfVector2f,
                                            view: *const sfView)
     -> sfVector2i;
    pub fn sfRenderTexture_drawSprite(renderTexture: *mut sfRenderTexture,
                                      object: *const sfSprite,
                                      states: *const sfRenderStates);
    pub fn sfRenderTexture_drawText(renderTexture: *mut sfRenderTexture,
                                    object: *const sfText,
                                    states: *const sfRenderStates);
    pub fn sfRenderTexture_drawShape(renderTexture: *mut sfRenderTexture,
                                     object: *const sfShape,
                                     states: *const sfRenderStates);
    pub fn sfRenderTexture_drawCircleShape(renderTexture:
                                               *mut sfRenderTexture,
                                           object: *const sfCircleShape,
                                           states: *const sfRenderStates);
    pub fn sfRenderTexture_drawConvexShape(renderTexture:
                                               *mut sfRenderTexture,
                                           object: *const sfConvexShape,
                                           states: *const sfRenderStates);
    pub fn sfRenderTexture_drawRectangleShape(renderTexture:
                                                  *mut sfRenderTexture,
                                              object: *const sfRectangleShape,
                                              states: *const sfRenderStates);
    pub fn sfRenderTexture_drawVertexArray(renderTexture:
                                               *mut sfRenderTexture,
                                           object: *const sfVertexArray,
                                           states: *const sfRenderStates);
    pub fn sfRenderTexture_drawPrimitives(renderTexture: *mut sfRenderTexture,
                                          vertices: *const sfVertex,
                                          vertexCount: usize,
                                          type_: sfPrimitiveType,
                                          states: *const sfRenderStates);
    pub fn sfRenderTexture_pushGLStates(renderTexture: *mut sfRenderTexture);
    pub fn sfRenderTexture_popGLStates(renderTexture: *mut sfRenderTexture);
    pub fn sfRenderTexture_resetGLStates(renderTexture: *mut sfRenderTexture);
    pub fn sfRenderTexture_getTexture(renderTexture: *const sfRenderTexture)
     -> *const sfTexture;
    pub fn sfRenderTexture_setSmooth(renderTexture: *mut sfRenderTexture,
                                     smooth: sfBool);
    pub fn sfRenderTexture_isSmooth(renderTexture: *const sfRenderTexture)
     -> sfBool;
    pub fn sfRenderTexture_setRepeated(renderTexture: *mut sfRenderTexture,
                                       repeated: sfBool);
    pub fn sfRenderTexture_isRepeated(renderTexture: *const sfRenderTexture)
     -> sfBool;
    pub fn sfRenderWindow_create(mode: sfVideoMode,
                                 title: *const ::std::os::raw::c_char,
                                 style: sfUint32,
                                 settings: *const sfContextSettings)
     -> *mut sfRenderWindow;
    pub fn sfRenderWindow_createUnicode(mode: sfVideoMode,
                                        title: *const sfUint32,
                                        style: sfUint32,
                                        settings: *const sfContextSettings)
     -> *mut sfRenderWindow;
    pub fn sfRenderWindow_createFromHandle(handle: sfWindowHandle,
                                           settings: *const sfContextSettings)
     -> *mut sfRenderWindow;
    pub fn sfRenderWindow_destroy(renderWindow: *mut sfRenderWindow);
    pub fn sfRenderWindow_close(renderWindow: *mut sfRenderWindow);
    pub fn sfRenderWindow_isOpen(renderWindow: *const sfRenderWindow)
     -> sfBool;
    pub fn sfRenderWindow_getSettings(renderWindow: *const sfRenderWindow)
     -> sfContextSettings;
    pub fn sfRenderWindow_pollEvent(renderWindow: *mut sfRenderWindow,
                                    event: *mut sfEvent) -> sfBool;
    pub fn sfRenderWindow_waitEvent(renderWindow: *mut sfRenderWindow,
                                    event: *mut sfEvent) -> sfBool;
    pub fn sfRenderWindow_getPosition(renderWindow: *const sfRenderWindow)
     -> sfVector2i;
    pub fn sfRenderWindow_setPosition(renderWindow: *mut sfRenderWindow,
                                      position: sfVector2i);
    pub fn sfRenderWindow_getSize(renderWindow: *const sfRenderWindow)
     -> sfVector2u;
    pub fn sfRenderWindow_setSize(renderWindow: *mut sfRenderWindow,
                                  size: sfVector2u);
    pub fn sfRenderWindow_setTitle(renderWindow: *mut sfRenderWindow,
                                   title: *const ::std::os::raw::c_char);
    pub fn sfRenderWindow_setUnicodeTitle(renderWindow: *mut sfRenderWindow,
                                          title: *const sfUint32);
    pub fn sfRenderWindow_setIcon(renderWindow: *mut sfRenderWindow,
                                  width: ::std::os::raw::c_uint,
                                  height: ::std::os::raw::c_uint,
                                  pixels: *const sfUint8);
    pub fn sfRenderWindow_setVisible(renderWindow: *mut sfRenderWindow,
                                     visible: sfBool);
    pub fn sfRenderWindow_setMouseCursorVisible(renderWindow:
                                                    *mut sfRenderWindow,
                                                show: sfBool);
    pub fn sfRenderWindow_setVerticalSyncEnabled(renderWindow:
                                                     *mut sfRenderWindow,
                                                 enabled: sfBool);
    pub fn sfRenderWindow_setKeyRepeatEnabled(renderWindow:
                                                  *mut sfRenderWindow,
                                              enabled: sfBool);
    pub fn sfRenderWindow_setActive(renderWindow: *mut sfRenderWindow,
                                    active: sfBool) -> sfBool;
    pub fn sfRenderWindow_requestFocus(renderWindow: *mut sfRenderWindow);
    pub fn sfRenderWindow_hasFocus(renderWindow: *const sfRenderWindow)
     -> sfBool;
    pub fn sfRenderWindow_display(renderWindow: *mut sfRenderWindow);
    pub fn sfRenderWindow_setFramerateLimit(renderWindow: *mut sfRenderWindow,
                                            limit: ::std::os::raw::c_uint);
    pub fn sfRenderWindow_setJoystickThreshold(renderWindow:
                                                   *mut sfRenderWindow,
                                               threshold: f32);
    pub fn sfRenderWindow_getSystemHandle(renderWindow: *const sfRenderWindow)
     -> sfWindowHandle;
    pub fn sfRenderWindow_clear(renderWindow: *mut sfRenderWindow,
                                color: sfColor);
    pub fn sfRenderWindow_setView(renderWindow: *mut sfRenderWindow,
                                  view: *const sfView);
    pub fn sfRenderWindow_getView(renderWindow: *const sfRenderWindow)
     -> *const sfView;
    pub fn sfRenderWindow_getDefaultView(renderWindow: *const sfRenderWindow)
     -> *const sfView;
    pub fn sfRenderWindow_getViewport(renderWindow: *const sfRenderWindow,
                                      view: *const sfView) -> sfIntRect;
    pub fn sfRenderWindow_mapPixelToCoords(renderWindow:
                                               *const sfRenderWindow,
                                           point: sfVector2i,
                                           view: *const sfView) -> sfVector2f;
    pub fn sfRenderWindow_mapCoordsToPixel(renderWindow:
                                               *const sfRenderWindow,
                                           point: sfVector2f,
                                           view: *const sfView) -> sfVector2i;
    pub fn sfRenderWindow_drawSprite(renderWindow: *mut sfRenderWindow,
                                     object: *const sfSprite,
                                     states: *const sfRenderStates);
    pub fn sfRenderWindow_drawText(renderWindow: *mut sfRenderWindow,
                                   object: *const sfText,
                                   states: *const sfRenderStates);
    pub fn sfRenderWindow_drawShape(renderWindow: *mut sfRenderWindow,
                                    object: *const sfShape,
                                    states: *const sfRenderStates);
    pub fn sfRenderWindow_drawCircleShape(renderWindow: *mut sfRenderWindow,
                                          object: *const sfCircleShape,
                                          states: *const sfRenderStates);
    pub fn sfRenderWindow_drawConvexShape(renderWindow: *mut sfRenderWindow,
                                          object: *const sfConvexShape,
                                          states: *const sfRenderStates);
    pub fn sfRenderWindow_drawRectangleShape(renderWindow:
                                                 *mut sfRenderWindow,
                                             object: *const sfRectangleShape,
                                             states: *const sfRenderStates);
    pub fn sfRenderWindow_drawVertexArray(renderWindow: *mut sfRenderWindow,
                                          object: *const sfVertexArray,
                                          states: *const sfRenderStates);
    pub fn sfRenderWindow_drawPrimitives(renderWindow: *mut sfRenderWindow,
                                         vertices: *const sfVertex,
                                         vertexCount: usize,
                                         type_: sfPrimitiveType,
                                         states: *const sfRenderStates);
    pub fn sfRenderWindow_pushGLStates(renderWindow: *mut sfRenderWindow);
    pub fn sfRenderWindow_popGLStates(renderWindow: *mut sfRenderWindow);
    pub fn sfRenderWindow_resetGLStates(renderWindow: *mut sfRenderWindow);
    pub fn sfRenderWindow_capture(renderWindow: *const sfRenderWindow)
     -> *mut sfImage;
    pub fn sfMouse_getPositionRenderWindow(relativeTo: *const sfRenderWindow)
     -> sfVector2i;
    pub fn sfMouse_setPositionRenderWindow(position: sfVector2i,
                                           relativeTo: *const sfRenderWindow);
    pub fn sfTouch_getPositionRenderWindow(finger: ::std::os::raw::c_uint,
                                           relativeTo: *const sfRenderWindow)
     -> sfVector2i;
    pub fn sfShader_createFromFile(vertexShaderFilename:
                                       *const ::std::os::raw::c_char,
                                   fragmentShaderFilename:
                                       *const ::std::os::raw::c_char)
     -> *mut sfShader;
    pub fn sfShader_createFromMemory(vertexShader:
                                         *const ::std::os::raw::c_char,
                                     fragmentShader:
                                         *const ::std::os::raw::c_char)
     -> *mut sfShader;
    pub fn sfShader_createFromStream(vertexShaderStream: *mut sfInputStream,
                                     fragmentShaderStream: *mut sfInputStream)
     -> *mut sfShader;
    pub fn sfShader_destroy(shader: *mut sfShader);
    pub fn sfShader_setFloatParameter(shader: *mut sfShader,
                                      name: *const ::std::os::raw::c_char,
                                      x: f32);
    pub fn sfShader_setFloat2Parameter(shader: *mut sfShader,
                                       name: *const ::std::os::raw::c_char,
                                       x: f32, y: f32);
    pub fn sfShader_setFloat3Parameter(shader: *mut sfShader,
                                       name: *const ::std::os::raw::c_char,
                                       x: f32, y: f32, z: f32);
    pub fn sfShader_setFloat4Parameter(shader: *mut sfShader,
                                       name: *const ::std::os::raw::c_char,
                                       x: f32, y: f32, z: f32, w: f32);
    pub fn sfShader_setVector2Parameter(shader: *mut sfShader,
                                        name: *const ::std::os::raw::c_char,
                                        vector: sfVector2f);
    pub fn sfShader_setVector3Parameter(shader: *mut sfShader,
                                        name: *const ::std::os::raw::c_char,
                                        vector: sfVector3f);
    pub fn sfShader_setColorParameter(shader: *mut sfShader,
                                      name: *const ::std::os::raw::c_char,
                                      color: sfColor);
    pub fn sfShader_setTransformParameter(shader: *mut sfShader,
                                          name: *const ::std::os::raw::c_char,
                                          transform: sfTransform);
    pub fn sfShader_setTextureParameter(shader: *mut sfShader,
                                        name: *const ::std::os::raw::c_char,
                                        texture: *const sfTexture);
    pub fn sfShader_setCurrentTextureParameter(shader: *mut sfShader,
                                               name:
                                                   *const ::std::os::raw::c_char);
    pub fn sfShader_getNativeHandle(shader: *const sfShader)
     -> ::std::os::raw::c_uint;
    pub fn sfShader_bind(shader: *const sfShader);
    pub fn sfShader_isAvailable() -> sfBool;
    pub fn sfShape_create(getPointCount: sfShapeGetPointCountCallback,
                          getPoint: sfShapeGetPointCallback,
                          userData: *mut ::std::os::raw::c_void)
     -> *mut sfShape;
    pub fn sfShape_destroy(shape: *mut sfShape);
    pub fn sfShape_setPosition(shape: *mut sfShape, position: sfVector2f);
    pub fn sfShape_setRotation(shape: *mut sfShape, angle: f32);
    pub fn sfShape_setScale(shape: *mut sfShape, scale: sfVector2f);
    pub fn sfShape_setOrigin(shape: *mut sfShape, origin: sfVector2f);
    pub fn sfShape_getPosition(shape: *const sfShape) -> sfVector2f;
    pub fn sfShape_getRotation(shape: *const sfShape) -> f32;
    pub fn sfShape_getScale(shape: *const sfShape) -> sfVector2f;
    pub fn sfShape_getOrigin(shape: *const sfShape) -> sfVector2f;
    pub fn sfShape_move(shape: *mut sfShape, offset: sfVector2f);
    pub fn sfShape_rotate(shape: *mut sfShape, angle: f32);
    pub fn sfShape_scale(shape: *mut sfShape, factors: sfVector2f);
    pub fn sfShape_getTransform(shape: *const sfShape) -> sfTransform;
    pub fn sfShape_getInverseTransform(shape: *const sfShape) -> sfTransform;
    pub fn sfShape_setTexture(shape: *mut sfShape, texture: *const sfTexture,
                              resetRect: sfBool);
    pub fn sfShape_setTextureRect(shape: *mut sfShape, rect: sfIntRect);
    pub fn sfShape_setFillColor(shape: *mut sfShape, color: sfColor);
    pub fn sfShape_setOutlineColor(shape: *mut sfShape, color: sfColor);
    pub fn sfShape_setOutlineThickness(shape: *mut sfShape, thickness: f32);
    pub fn sfShape_getTexture(shape: *const sfShape) -> *const sfTexture;
    pub fn sfShape_getTextureRect(shape: *const sfShape) -> sfIntRect;
    pub fn sfShape_getFillColor(shape: *const sfShape) -> sfColor;
    pub fn sfShape_getOutlineColor(shape: *const sfShape) -> sfColor;
    pub fn sfShape_getOutlineThickness(shape: *const sfShape) -> f32;
    pub fn sfShape_getPointCount(shape: *const sfShape) -> usize;
    pub fn sfShape_getPoint(shape: *const sfShape, index: usize)
     -> sfVector2f;
    pub fn sfShape_getLocalBounds(shape: *const sfShape) -> sfFloatRect;
    pub fn sfShape_getGlobalBounds(shape: *const sfShape) -> sfFloatRect;
    pub fn sfShape_update(shape: *mut sfShape);
    pub fn sfSprite_create() -> *mut sfSprite;
    pub fn sfSprite_copy(sprite: *const sfSprite) -> *mut sfSprite;
    pub fn sfSprite_destroy(sprite: *mut sfSprite);
    pub fn sfSprite_setPosition(sprite: *mut sfSprite, position: sfVector2f);
    pub fn sfSprite_setRotation(sprite: *mut sfSprite, angle: f32);
    pub fn sfSprite_setScale(sprite: *mut sfSprite, scale: sfVector2f);
    pub fn sfSprite_setOrigin(sprite: *mut sfSprite, origin: sfVector2f);
    pub fn sfSprite_getPosition(sprite: *const sfSprite) -> sfVector2f;
    pub fn sfSprite_getRotation(sprite: *const sfSprite) -> f32;
    pub fn sfSprite_getScale(sprite: *const sfSprite) -> sfVector2f;
    pub fn sfSprite_getOrigin(sprite: *const sfSprite) -> sfVector2f;
    pub fn sfSprite_move(sprite: *mut sfSprite, offset: sfVector2f);
    pub fn sfSprite_rotate(sprite: *mut sfSprite, angle: f32);
    pub fn sfSprite_scale(sprite: *mut sfSprite, factors: sfVector2f);
    pub fn sfSprite_getTransform(sprite: *const sfSprite) -> sfTransform;
    pub fn sfSprite_getInverseTransform(sprite: *const sfSprite)
     -> sfTransform;
    pub fn sfSprite_setTexture(sprite: *mut sfSprite,
                               texture: *const sfTexture, resetRect: sfBool);
    pub fn sfSprite_setTextureRect(sprite: *mut sfSprite,
                                   rectangle: sfIntRect);
    pub fn sfSprite_setColor(sprite: *mut sfSprite, color: sfColor);
    pub fn sfSprite_getTexture(sprite: *const sfSprite) -> *const sfTexture;
    pub fn sfSprite_getTextureRect(sprite: *const sfSprite) -> sfIntRect;
    pub fn sfSprite_getColor(sprite: *const sfSprite) -> sfColor;
    pub fn sfSprite_getLocalBounds(sprite: *const sfSprite) -> sfFloatRect;
    pub fn sfSprite_getGlobalBounds(sprite: *const sfSprite) -> sfFloatRect;
    pub fn sfText_create() -> *mut sfText;
    pub fn sfText_copy(text: *const sfText) -> *mut sfText;
    pub fn sfText_destroy(text: *mut sfText);
    pub fn sfText_setPosition(text: *mut sfText, position: sfVector2f);
    pub fn sfText_setRotation(text: *mut sfText, angle: f32);
    pub fn sfText_setScale(text: *mut sfText, scale: sfVector2f);
    pub fn sfText_setOrigin(text: *mut sfText, origin: sfVector2f);
    pub fn sfText_getPosition(text: *const sfText) -> sfVector2f;
    pub fn sfText_getRotation(text: *const sfText) -> f32;
    pub fn sfText_getScale(text: *const sfText) -> sfVector2f;
    pub fn sfText_getOrigin(text: *const sfText) -> sfVector2f;
    pub fn sfText_move(text: *mut sfText, offset: sfVector2f);
    pub fn sfText_rotate(text: *mut sfText, angle: f32);
    pub fn sfText_scale(text: *mut sfText, factors: sfVector2f);
    pub fn sfText_getTransform(text: *const sfText) -> sfTransform;
    pub fn sfText_getInverseTransform(text: *const sfText) -> sfTransform;
    pub fn sfText_setString(text: *mut sfText,
                            string: *const ::std::os::raw::c_char);
    pub fn sfText_setUnicodeString(text: *mut sfText,
                                   string: *const sfUint32);
    pub fn sfText_setFont(text: *mut sfText, font: *const sfFont);
    pub fn sfText_setCharacterSize(text: *mut sfText,
                                   size: ::std::os::raw::c_uint);
    pub fn sfText_setStyle(text: *mut sfText, style: sfUint32);
    pub fn sfText_setColor(text: *mut sfText, color: sfColor);
    pub fn sfText_getString(text: *const sfText)
     -> *const ::std::os::raw::c_char;
    pub fn sfText_getUnicodeString(text: *const sfText) -> *const sfUint32;
    pub fn sfText_getFont(text: *const sfText) -> *const sfFont;
    pub fn sfText_getCharacterSize(text: *const sfText)
     -> ::std::os::raw::c_uint;
    pub fn sfText_getStyle(text: *const sfText) -> sfUint32;
    pub fn sfText_getColor(text: *const sfText) -> sfColor;
    pub fn sfText_findCharacterPos(text: *const sfText, index: usize)
     -> sfVector2f;
    pub fn sfText_getLocalBounds(text: *const sfText) -> sfFloatRect;
    pub fn sfText_getGlobalBounds(text: *const sfText) -> sfFloatRect;
    pub fn sfTexture_create(width: ::std::os::raw::c_uint,
                            height: ::std::os::raw::c_uint) -> *mut sfTexture;
    pub fn sfTexture_createFromFile(filename: *const ::std::os::raw::c_char,
                                    area: *const sfIntRect) -> *mut sfTexture;
    pub fn sfTexture_createFromMemory(data: *const ::std::os::raw::c_void,
                                      sizeInBytes: usize,
                                      area: *const sfIntRect)
     -> *mut sfTexture;
    pub fn sfTexture_createFromStream(stream: *mut sfInputStream,
                                      area: *const sfIntRect)
     -> *mut sfTexture;
    pub fn sfTexture_createFromImage(image: *const sfImage,
                                     area: *const sfIntRect)
     -> *mut sfTexture;
    pub fn sfTexture_copy(texture: *const sfTexture) -> *mut sfTexture;
    pub fn sfTexture_destroy(texture: *mut sfTexture);
    pub fn sfTexture_getSize(texture: *const sfTexture) -> sfVector2u;
    pub fn sfTexture_copyToImage(texture: *const sfTexture) -> *mut sfImage;
    pub fn sfTexture_updateFromPixels(texture: *mut sfTexture,
                                      pixels: *const sfUint8,
                                      width: ::std::os::raw::c_uint,
                                      height: ::std::os::raw::c_uint,
                                      x: ::std::os::raw::c_uint,
                                      y: ::std::os::raw::c_uint);
    pub fn sfTexture_updateFromImage(texture: *mut sfTexture,
                                     image: *const sfImage,
                                     x: ::std::os::raw::c_uint,
                                     y: ::std::os::raw::c_uint);
    pub fn sfTexture_updateFromWindow(texture: *mut sfTexture,
                                      window: *const sfWindow,
                                      x: ::std::os::raw::c_uint,
                                      y: ::std::os::raw::c_uint);
    pub fn sfTexture_updateFromRenderWindow(texture: *mut sfTexture,
                                            renderWindow:
                                                *const sfRenderWindow,
                                            x: ::std::os::raw::c_uint,
                                            y: ::std::os::raw::c_uint);
    pub fn sfTexture_setSmooth(texture: *mut sfTexture, smooth: sfBool);
    pub fn sfTexture_isSmooth(texture: *const sfTexture) -> sfBool;
    pub fn sfTexture_setRepeated(texture: *mut sfTexture, repeated: sfBool);
    pub fn sfTexture_isRepeated(texture: *const sfTexture) -> sfBool;
    pub fn sfTexture_getNativeHandle(texture: *const sfTexture)
     -> ::std::os::raw::c_uint;
    pub fn sfTexture_bind(texture: *const sfTexture);
    pub fn sfTexture_getMaximumSize() -> ::std::os::raw::c_uint;
    pub fn sfTransformable_create() -> *mut sfTransformable;
    pub fn sfTransformable_copy(transformable: *const sfTransformable)
     -> *mut sfTransformable;
    pub fn sfTransformable_destroy(transformable: *mut sfTransformable);
    pub fn sfTransformable_setPosition(transformable: *mut sfTransformable,
                                       position: sfVector2f);
    pub fn sfTransformable_setRotation(transformable: *mut sfTransformable,
                                       angle: f32);
    pub fn sfTransformable_setScale(transformable: *mut sfTransformable,
                                    scale: sfVector2f);
    pub fn sfTransformable_setOrigin(transformable: *mut sfTransformable,
                                     origin: sfVector2f);
    pub fn sfTransformable_getPosition(transformable: *const sfTransformable)
     -> sfVector2f;
    pub fn sfTransformable_getRotation(transformable: *const sfTransformable)
     -> f32;
    pub fn sfTransformable_getScale(transformable: *const sfTransformable)
     -> sfVector2f;
    pub fn sfTransformable_getOrigin(transformable: *const sfTransformable)
     -> sfVector2f;
    pub fn sfTransformable_move(transformable: *mut sfTransformable,
                                offset: sfVector2f);
    pub fn sfTransformable_rotate(transformable: *mut sfTransformable,
                                  angle: f32);
    pub fn sfTransformable_scale(transformable: *mut sfTransformable,
                                 factors: sfVector2f);
    pub fn sfTransformable_getTransform(transformable: *const sfTransformable)
     -> sfTransform;
    pub fn sfTransformable_getInverseTransform(transformable:
                                                   *const sfTransformable)
     -> sfTransform;
    pub fn sfVertexArray_create() -> *mut sfVertexArray;
    pub fn sfVertexArray_copy(vertexArray: *const sfVertexArray)
     -> *mut sfVertexArray;
    pub fn sfVertexArray_destroy(vertexArray: *mut sfVertexArray);
    pub fn sfVertexArray_getVertexCount(vertexArray: *const sfVertexArray)
     -> usize;
    pub fn sfVertexArray_getVertex(vertexArray: *mut sfVertexArray,
                                   index: usize) -> *mut sfVertex;
    pub fn sfVertexArray_clear(vertexArray: *mut sfVertexArray);
    pub fn sfVertexArray_resize(vertexArray: *mut sfVertexArray,
                                vertexCount: usize);
    pub fn sfVertexArray_append(vertexArray: *mut sfVertexArray,
                                vertex: sfVertex);
    pub fn sfVertexArray_setPrimitiveType(vertexArray: *mut sfVertexArray,
                                          type_: sfPrimitiveType);
    pub fn sfVertexArray_getPrimitiveType(vertexArray: *mut sfVertexArray)
     -> sfPrimitiveType;
    pub fn sfVertexArray_getBounds(vertexArray: *mut sfVertexArray)
     -> sfFloatRect;
    pub fn sfView_create() -> *mut sfView;
    pub fn sfView_createFromRect(rectangle: sfFloatRect) -> *mut sfView;
    pub fn sfView_copy(view: *const sfView) -> *mut sfView;
    pub fn sfView_destroy(view: *mut sfView);
    pub fn sfView_setCenter(view: *mut sfView, center: sfVector2f);
    pub fn sfView_setSize(view: *mut sfView, size: sfVector2f);
    pub fn sfView_setRotation(view: *mut sfView, angle: f32);
    pub fn sfView_setViewport(view: *mut sfView, viewport: sfFloatRect);
    pub fn sfView_reset(view: *mut sfView, rectangle: sfFloatRect);
    pub fn sfView_getCenter(view: *const sfView) -> sfVector2f;
    pub fn sfView_getSize(view: *const sfView) -> sfVector2f;
    pub fn sfView_getRotation(view: *const sfView) -> f32;
    pub fn sfView_getViewport(view: *const sfView) -> sfFloatRect;
    pub fn sfView_move(view: *mut sfView, offset: sfVector2f);
    pub fn sfView_rotate(view: *mut sfView, angle: f32);
    pub fn sfView_zoom(view: *mut sfView, factor: f32);
}
