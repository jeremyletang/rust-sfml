/* automatically generated by rust-bindgen */

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]

#![allow(dead_code, non_camel_case_types, non_snake_case)]

// -- Manual additions --
extern crate csfml_system_sys;
use csfml_system_sys::*;
// -- End manual additions --

// Manually edited to replace occurences of `size_t` with `usize`

#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum sfSoundStatus { sfStopped = 0, sfPaused = 1, sfPlaying = 2, }
pub enum sfMusic { }
pub enum sfSound { }
pub enum sfSoundBuffer { }
pub enum sfSoundBufferRecorder { }
pub enum sfSoundRecorder { }
pub enum sfSoundStream { }
pub type sfSoundRecorderStartCallback =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *mut ::std::os::raw::c_void)
                              -> sfBool>;
pub type sfSoundRecorderProcessCallback =
    ::std::option::Option<unsafe extern "C" fn(arg1: *const sfInt16,
                                               arg2: usize,
                                               arg3:
                                                   *mut ::std::os::raw::c_void)
                              -> sfBool>;
pub type sfSoundRecorderStopCallback =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sfSoundStreamChunk {
    pub samples: *mut sfInt16,
    pub sampleCount: ::std::os::raw::c_uint,
}
impl ::std::default::Default for sfSoundStreamChunk {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type sfSoundStreamGetDataCallback =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut sfSoundStreamChunk,
                                               arg2:
                                                   *mut ::std::os::raw::c_void)
                              -> sfBool>;
pub type sfSoundStreamSeekCallback =
    ::std::option::Option<unsafe extern "C" fn(arg1: sfTime,
                                               arg2:
                                                   *mut ::std::os::raw::c_void)>;
extern "C" {
    pub fn sfListener_setGlobalVolume(volume: f32);
    pub fn sfListener_getGlobalVolume() -> f32;
    pub fn sfListener_setPosition(position: sfVector3f);
    pub fn sfListener_getPosition() -> sfVector3f;
    pub fn sfListener_setDirection(direction: sfVector3f);
    pub fn sfListener_getDirection() -> sfVector3f;
    pub fn sfListener_setUpVector(upVector: sfVector3f);
    pub fn sfListener_getUpVector() -> sfVector3f;
    pub fn sfMusic_createFromFile(filename: *const ::std::os::raw::c_char)
     -> *mut sfMusic;
    pub fn sfMusic_createFromMemory(data: *const ::std::os::raw::c_void,
                                    sizeInBytes: usize) -> *mut sfMusic;
    pub fn sfMusic_createFromStream(stream: *mut sfInputStream)
     -> *mut sfMusic;
    pub fn sfMusic_destroy(music: *mut sfMusic);
    pub fn sfMusic_setLoop(music: *mut sfMusic, loop_: sfBool);
    pub fn sfMusic_getLoop(music: *const sfMusic) -> sfBool;
    pub fn sfMusic_getDuration(music: *const sfMusic) -> sfTime;
    pub fn sfMusic_play(music: *mut sfMusic);
    pub fn sfMusic_pause(music: *mut sfMusic);
    pub fn sfMusic_stop(music: *mut sfMusic);
    pub fn sfMusic_getChannelCount(music: *const sfMusic)
     -> ::std::os::raw::c_uint;
    pub fn sfMusic_getSampleRate(music: *const sfMusic)
     -> ::std::os::raw::c_uint;
    pub fn sfMusic_getStatus(music: *const sfMusic) -> sfSoundStatus;
    pub fn sfMusic_getPlayingOffset(music: *const sfMusic) -> sfTime;
    pub fn sfMusic_setPitch(music: *mut sfMusic, pitch: f32);
    pub fn sfMusic_setVolume(music: *mut sfMusic, volume: f32);
    pub fn sfMusic_setPosition(music: *mut sfMusic, position: sfVector3f);
    pub fn sfMusic_setRelativeToListener(music: *mut sfMusic,
                                         relative: sfBool);
    pub fn sfMusic_setMinDistance(music: *mut sfMusic, distance: f32);
    pub fn sfMusic_setAttenuation(music: *mut sfMusic, attenuation: f32);
    pub fn sfMusic_setPlayingOffset(music: *mut sfMusic, timeOffset: sfTime);
    pub fn sfMusic_getPitch(music: *const sfMusic) -> f32;
    pub fn sfMusic_getVolume(music: *const sfMusic) -> f32;
    pub fn sfMusic_getPosition(music: *const sfMusic) -> sfVector3f;
    pub fn sfMusic_isRelativeToListener(music: *const sfMusic) -> sfBool;
    pub fn sfMusic_getMinDistance(music: *const sfMusic) -> f32;
    pub fn sfMusic_getAttenuation(music: *const sfMusic) -> f32;
    pub fn sfSound_create() -> *mut sfSound;
    pub fn sfSound_copy(sound: *const sfSound) -> *mut sfSound;
    pub fn sfSound_destroy(sound: *mut sfSound);
    pub fn sfSound_play(sound: *mut sfSound);
    pub fn sfSound_pause(sound: *mut sfSound);
    pub fn sfSound_stop(sound: *mut sfSound);
    pub fn sfSound_setBuffer(sound: *mut sfSound,
                             buffer: *const sfSoundBuffer);
    pub fn sfSound_getBuffer(sound: *const sfSound) -> *const sfSoundBuffer;
    pub fn sfSound_setLoop(sound: *mut sfSound, loop_: sfBool);
    pub fn sfSound_getLoop(sound: *const sfSound) -> sfBool;
    pub fn sfSound_getStatus(sound: *const sfSound) -> sfSoundStatus;
    pub fn sfSound_setPitch(sound: *mut sfSound, pitch: f32);
    pub fn sfSound_setVolume(sound: *mut sfSound, volume: f32);
    pub fn sfSound_setPosition(sound: *mut sfSound, position: sfVector3f);
    pub fn sfSound_setRelativeToListener(sound: *mut sfSound,
                                         relative: sfBool);
    pub fn sfSound_setMinDistance(sound: *mut sfSound, distance: f32);
    pub fn sfSound_setAttenuation(sound: *mut sfSound, attenuation: f32);
    pub fn sfSound_setPlayingOffset(sound: *mut sfSound, timeOffset: sfTime);
    pub fn sfSound_getPitch(sound: *const sfSound) -> f32;
    pub fn sfSound_getVolume(sound: *const sfSound) -> f32;
    pub fn sfSound_getPosition(sound: *const sfSound) -> sfVector3f;
    pub fn sfSound_isRelativeToListener(sound: *const sfSound) -> sfBool;
    pub fn sfSound_getMinDistance(sound: *const sfSound) -> f32;
    pub fn sfSound_getAttenuation(sound: *const sfSound) -> f32;
    pub fn sfSound_getPlayingOffset(sound: *const sfSound) -> sfTime;
    pub fn sfSoundBuffer_createFromFile(filename:
                                            *const ::std::os::raw::c_char)
     -> *mut sfSoundBuffer;
    pub fn sfSoundBuffer_createFromMemory(data: *const ::std::os::raw::c_void,
                                          sizeInBytes: usize)
     -> *mut sfSoundBuffer;
    pub fn sfSoundBuffer_createFromStream(stream: *mut sfInputStream)
     -> *mut sfSoundBuffer;
    pub fn sfSoundBuffer_createFromSamples(samples: *const sfInt16,
                                           sampleCount: sfUint64,
                                           channelCount:
                                               ::std::os::raw::c_uint,
                                           sampleRate: ::std::os::raw::c_uint)
     -> *mut sfSoundBuffer;
    pub fn sfSoundBuffer_copy(soundBuffer: *const sfSoundBuffer)
     -> *mut sfSoundBuffer;
    pub fn sfSoundBuffer_destroy(soundBuffer: *mut sfSoundBuffer);
    pub fn sfSoundBuffer_saveToFile(soundBuffer: *const sfSoundBuffer,
                                    filename: *const ::std::os::raw::c_char)
     -> sfBool;
    pub fn sfSoundBuffer_getSamples(soundBuffer: *const sfSoundBuffer)
     -> *const sfInt16;
    pub fn sfSoundBuffer_getSampleCount(soundBuffer: *const sfSoundBuffer)
     -> sfUint64;
    pub fn sfSoundBuffer_getSampleRate(soundBuffer: *const sfSoundBuffer)
     -> ::std::os::raw::c_uint;
    pub fn sfSoundBuffer_getChannelCount(soundBuffer: *const sfSoundBuffer)
     -> ::std::os::raw::c_uint;
    pub fn sfSoundBuffer_getDuration(soundBuffer: *const sfSoundBuffer)
     -> sfTime;
    pub fn sfSoundBufferRecorder_create() -> *mut sfSoundBufferRecorder;
    pub fn sfSoundBufferRecorder_destroy(soundBufferRecorder:
                                             *mut sfSoundBufferRecorder);
    pub fn sfSoundBufferRecorder_start(soundBufferRecorder:
                                           *mut sfSoundBufferRecorder,
                                       sampleRate: ::std::os::raw::c_uint);
    pub fn sfSoundBufferRecorder_stop(soundBufferRecorder:
                                          *mut sfSoundBufferRecorder);
    pub fn sfSoundBufferRecorder_getSampleRate(soundBufferRecorder:
                                                   *const sfSoundBufferRecorder)
     -> ::std::os::raw::c_uint;
    pub fn sfSoundBufferRecorder_getBuffer(soundBufferRecorder:
                                               *const sfSoundBufferRecorder)
     -> *const sfSoundBuffer;
    pub fn sfSoundRecorder_create(onStart: sfSoundRecorderStartCallback,
                                  onProcess: sfSoundRecorderProcessCallback,
                                  onStop: sfSoundRecorderStopCallback,
                                  userData: *mut ::std::os::raw::c_void)
     -> *mut sfSoundRecorder;
    pub fn sfSoundRecorder_destroy(soundRecorder: *mut sfSoundRecorder);
    pub fn sfSoundRecorder_start(soundRecorder: *mut sfSoundRecorder,
                                 sampleRate: ::std::os::raw::c_uint)
     -> sfBool;
    pub fn sfSoundRecorder_stop(soundRecorder: *mut sfSoundRecorder);
    pub fn sfSoundRecorder_getSampleRate(soundRecorder:
                                             *const sfSoundRecorder)
     -> ::std::os::raw::c_uint;
    pub fn sfSoundRecorder_isAvailable() -> sfBool;
    pub fn sfSoundRecorder_setProcessingInterval(soundRecorder:
                                                     *mut sfSoundRecorder,
                                                 interval: sfTime);
    pub fn sfSoundRecorder_getAvailableDevices(count: *mut usize)
     -> *mut *const ::std::os::raw::c_char;
    pub fn sfSoundRecorder_getDefaultDevice()
     -> *const ::std::os::raw::c_char;
    pub fn sfSoundRecorder_setDevice(soundRecorder: *mut sfSoundRecorder,
                                     name: *const ::std::os::raw::c_char)
     -> sfBool;
    pub fn sfSoundRecorder_getDevice(soundRecorder: *mut sfSoundRecorder)
     -> *const ::std::os::raw::c_char;
    pub fn sfSoundStream_create(onGetData: sfSoundStreamGetDataCallback,
                                onSeek: sfSoundStreamSeekCallback,
                                channelCount: ::std::os::raw::c_uint,
                                sampleRate: ::std::os::raw::c_uint,
                                userData: *mut ::std::os::raw::c_void)
     -> *mut sfSoundStream;
    pub fn sfSoundStream_destroy(soundStream: *mut sfSoundStream);
    pub fn sfSoundStream_play(soundStream: *mut sfSoundStream);
    pub fn sfSoundStream_pause(soundStream: *mut sfSoundStream);
    pub fn sfSoundStream_stop(soundStream: *mut sfSoundStream);
    pub fn sfSoundStream_getStatus(soundStream: *const sfSoundStream)
     -> sfSoundStatus;
    pub fn sfSoundStream_getChannelCount(soundStream: *const sfSoundStream)
     -> ::std::os::raw::c_uint;
    pub fn sfSoundStream_getSampleRate(soundStream: *const sfSoundStream)
     -> ::std::os::raw::c_uint;
    pub fn sfSoundStream_setPitch(soundStream: *mut sfSoundStream,
                                  pitch: f32);
    pub fn sfSoundStream_setVolume(soundStream: *mut sfSoundStream,
                                   volume: f32);
    pub fn sfSoundStream_setPosition(soundStream: *mut sfSoundStream,
                                     position: sfVector3f);
    pub fn sfSoundStream_setRelativeToListener(soundStream:
                                                   *mut sfSoundStream,
                                               relative: sfBool);
    pub fn sfSoundStream_setMinDistance(soundStream: *mut sfSoundStream,
                                        distance: f32);
    pub fn sfSoundStream_setAttenuation(soundStream: *mut sfSoundStream,
                                        attenuation: f32);
    pub fn sfSoundStream_setPlayingOffset(soundStream: *mut sfSoundStream,
                                          timeOffset: sfTime);
    pub fn sfSoundStream_setLoop(soundStream: *mut sfSoundStream,
                                 loop_: sfBool);
    pub fn sfSoundStream_getPitch(soundStream: *const sfSoundStream) -> f32;
    pub fn sfSoundStream_getVolume(soundStream: *const sfSoundStream) -> f32;
    pub fn sfSoundStream_getPosition(soundStream: *const sfSoundStream)
     -> sfVector3f;
    pub fn sfSoundStream_isRelativeToListener(soundStream:
                                                  *const sfSoundStream)
     -> sfBool;
    pub fn sfSoundStream_getMinDistance(soundStream: *const sfSoundStream)
     -> f32;
    pub fn sfSoundStream_getAttenuation(soundStream: *const sfSoundStream)
     -> f32;
    pub fn sfSoundStream_getLoop(soundStream: *const sfSoundStream) -> sfBool;
    pub fn sfSoundStream_getPlayingOffset(soundStream: *const sfSoundStream)
     -> sfTime;
}
